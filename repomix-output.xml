This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/dashboard/classrooms/[id]/page.tsx
src/app/dashboard/classrooms/page.tsx
src/app/dashboard/layout.tsx
src/app/dashboard/page.tsx
src/app/dashboard/utils.ts
src/app/globals.css
src/app/layout.tsx
src/app/login/page.tsx
src/app/page.tsx
src/components/classroom-schedule-calendar.tsx
src/components/company-select.tsx
src/components/dashboard-header.tsx
src/components/loader.tsx
src/components/ui/activity-item.tsx
src/components/ui/alert.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/calendar.tsx
src/components/ui/card.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/form.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/quick-stat-card.tsx
src/components/ui/scroll-area.tsx
src/components/ui/select.tsx
src/components/ui/table.tsx
src/components/ui/tabs.tsx
src/components/ui/toggle-group.tsx
src/components/ui/tooltip.tsx
src/components/user-menu.tsx
src/context/auth-context.tsx
src/context/staff-context.tsx
src/lib/api/auth.ts
src/lib/api/axios.ts
src/lib/api/classroom.ts
src/lib/api/company.ts
src/lib/api/index.ts
src/lib/api/teacher.ts
src/lib/utils.ts
src/middleware.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="src/app/dashboard/utils.ts">
import { Classroom } from "@/lib/api/classroom";

interface DashboardStats {
  activeClasses: number;
  totalStudents: number;
  upcomingClasses: number;
  activeRate: number;
}

export function calculateStats(classrooms: Classroom[]): DashboardStats {
  const activeClasses = classrooms.filter((c) => c.isActive).length;
  const totalStudents = classrooms.reduce((sum, c) => sum + (c.studentNumber || 0), 0);
  
  const today = new Date();
  const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);
  
  const upcomingClasses = classrooms.filter((c) => {
    const startDate = new Date(c.startDate);
    return startDate >= today && startDate <= nextWeek;
  }).length;

  const activeRate = classrooms.length ? Math.round((activeClasses / classrooms.length) * 100) : 0;

  return {
    activeClasses,
    totalStudents,
    upcomingClasses,
    activeRate,
  };
}

export function formatRelativeTime(date: Date): string {
  const now = new Date();
  const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));

  if (diffInHours < 1) return "Just now";
  if (diffInHours < 24) return `${diffInHours} hours ago`;
  if (diffInHours < 48) return "Yesterday";
  return `${Math.floor(diffInHours / 24)} days ago`;
}
</file>

<file path="src/app/login/page.tsx">
"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useAuth } from "@/context/auth-context";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import Image from "next/image";

const loginSchema = z.object({
  txtusername: z.string().min(1, "Username is required"),
  txtpassword: z.string().min(1, "Password is required"),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export default function LoginPage() {
  const { login, isLoading, error } = useAuth();
  const [showPassword, setShowPassword] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
  });

  const onSubmit = async (data: LoginFormValues) => {
    await login(data);
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <Card className="w-full max-w-md shadow-xl">
        <CardHeader className="space-y-1 text-center">
          <div className="flex justify-center mb-4">
            <Image
              src="/houston123-logo.png"
              alt="Houston123 Logo"
              width={180}
              height={60}
              priority
              className="h-16 w-auto"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.onerror = null;
                target.src = "/next.svg";
              }}
            />
          </div>
          <CardTitle className="text-2xl font-bold">Login</CardTitle>
          <CardDescription>
            Enter your credentials to access the classroom management system
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="username">Username</Label>
              <Input
                id="username"
                placeholder="Enter your username"
                {...register("txtusername")}
                className={errors.txtusername ? "border-red-500" : ""}
                disabled={isLoading}
              />
              {errors.txtusername && (
                <p className="text-red-500 text-sm">
                  {errors.txtusername.message}
                </p>
              )}
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="Enter your password"
                  {...register("txtpassword")}
                  className={errors.txtpassword ? "border-red-500" : ""}
                  disabled={isLoading}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5"
                >
                  {showPassword ? "Hide" : "Show"}
                </button>
              </div>
              {errors.txtpassword && (
                <p className="text-red-500 text-sm">
                  {errors.txtpassword.message}
                </p>
              )}
            </div>
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? "Logging in..." : "Login"}
            </Button>
          </form>
        </CardContent>
        <CardFooter className="flex justify-center text-sm text-gray-500">
          &copy; {new Date().getFullYear()} Houston123 Education
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/loader.tsx">
"use client";

export default function Loader({
  size = "md",
  className = "",
}: {
  size?: "sm" | "md" | "lg";
  className?: string;
}) {
  const sizeClasses = {
    sm: "h-4 w-4 border-2",
    md: "h-8 w-8 border-4",
    lg: "h-12 w-12 border-4",
  };

  return (
    <div className={`flex justify-center items-center ${className}`}>
      <div
        className={`animate-spin ${sizeClasses[size]} border-blue-500 rounded-full border-t-transparent`}
      ></div>
    </div>
  );
}
</file>

<file path="src/components/ui/activity-item.tsx">
interface ActivityItemProps {
  title: string;
  description: string;
  time: string;
}

export function ActivityItem({ title, description, time }: ActivityItemProps) {
  return (
    <div className="flex items-center gap-4 rounded-lg border p-3">
      <div className="flex-1 space-y-1">
        <p className="text-sm font-medium">{title}</p>
        <p className="text-sm text-gray-500">{description}</p>
      </div>
      <div className="text-xs text-gray-500">{time}</div>
    </div>
  );
}
</file>

<file path="src/components/ui/calendar.tsx">
"use client";

import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={className}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: "h-9 w-9 p-0 font-normal aria-selected:opacity-100 hover:bg-accent hover:text-accent-foreground rounded-md flex items-center justify-center",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="src/components/ui/scroll-area.tsx">
"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root ref={ref} className={className} {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={[
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-[1px]",
      className,
    ].join(" ")}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };
</file>

<file path="src/components/ui/tooltip.tsx">
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={[
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    ].join(" ")}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="src/context/auth-context.tsx">
"use client";

import {
  createContext,
  useContext,
  useEffect,
  useState,
  ReactNode,
} from "react";
import { useRouter } from "next/navigation";
import { authService, LoginCredentials } from "@/lib/api/auth";

interface AuthContextType {
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (credentials: LoginCredentials) => Promise<void>;
  logout: () => void;
  error: string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  useEffect(() => {
    // Check if user is already authenticated
    const checkAuth = () => {
      const authenticated = authService.isAuthenticated();
      setIsAuthenticated(authenticated);
      
      // If not authenticated and not on login page, redirect to login
      if (!authenticated && !window.location.pathname.includes('/login')) {
        router.push('/login');
      }
      
      setIsLoading(false);
    };

    checkAuth();
    
    // Set up interval to periodically check token validity
    const interval = setInterval(checkAuth, 60000); // Check every minute
    
    return () => clearInterval(interval);
  }, [router]);

  const login = async (credentials: LoginCredentials) => {
    setIsLoading(true);
    setError(null);

    try {
      await authService.login(credentials);
      setIsAuthenticated(true);
      router.push("/dashboard");
    } catch (err: any) {
      setError(err.response?.data?.message || "Failed to login");
      setIsAuthenticated(false);
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    authService.logout();
    setIsAuthenticated(false);
    router.push("/login");
  };

  return (
    <AuthContext.Provider
      value={{ isAuthenticated, isLoading, login, logout, error }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
</file>

<file path="src/context/staff-context.tsx">
"use client";

import {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";
import { api } from "@/lib/api";

interface StaffInfo {
  _id: string;
  userId: string;
  userID: string;
  staffId: string;
  name: string;
  displayName: string;
  phoneNumber: string;
  birthday: string;
  email: string;
  personalId: string;
  positionName: string;
  address: string;
  branch: string[];
  imageUrl: string | null;
  imageProfile: string | null;
  position: string;
  shortPermissionName: string;
  permission: string;
  directManager: string | null;
  department: string[];
  moodleAccountId: number;
  educationBackground: string | null;
  specialize: string[];
  license: string[];
  level: string[];
  leaveDate: string | null;
  "8x8link": string | null;
}

interface StaffContextType {
  staff: StaffInfo | null;
  loading: boolean;
  refetchStaff: () => Promise<void>;
}

const StaffContext = createContext<StaffContextType | undefined>(undefined);

export function StaffProvider({ children }: { children: ReactNode }) {
  const [staff, setStaff] = useState<StaffInfo | null>(null);
  const [loading, setLoading] = useState(true);

  const fetchStaffInfo = async () => {
    const token = localStorage.getItem("token");
    if (!token) return;

    try {
      setLoading(true);
      const response = await api.get("/user/staff/me");
      const [data] = response.data;
      setStaff(data);
    } catch (error) {
      console.error("Failed to fetch staff info:", error);
      setStaff(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStaffInfo();
  }, []);

  return (
    <StaffContext.Provider
      value={{
        staff,
        loading,
        refetchStaff: fetchStaffInfo,
      }}
    >
      {children}
    </StaffContext.Provider>
  );
}

export function useStaff() {
  const context = useContext(StaffContext);
  if (context === undefined) {
    throw new Error("useStaff must be used within a StaffProvider");
  }
  return context;
}
</file>

<file path="src/lib/api/auth.ts">
import api from "./axios";
import axios from "axios";

export interface LoginCredentials {
  txtusername: string;
  txtpassword: string;
}

export interface AuthResponse {
  token: string;
  user?: any;
}

export const authService = {
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      // First try using the direct proxy route to avoid CORS issues
      const response = await axios.post("/auth/token", credentials);

      // Check for an authentication token in the response headers or data
      const token =
        response.headers["authorization"] ||
        response.headers["x-auth-token"] ||
        (response.data && (response.data.token || response.data.accessToken));

      // For 204 responses, we might need to extract token from headers
      if (response.status === 204) {
        if (token) {
          localStorage.setItem("token", token.replace("Bearer ", ""));
          return { token: token.replace("Bearer ", "") };
        }
      } else if (response.data && response.data.token) {
        localStorage.setItem("token", response.data.token);
        return response.data;
      }

      // If we reach here, try the second method
      throw new Error("No token found in response");
    } catch (error: any) {
      try {
        // Then try using the server-side API route
        const response = await axios.post("/api/auth/token", credentials, {
          validateStatus: (status) => status >= 200 && status < 500,
        });

        // Check for an authentication token in the response headers for 204 response
        const token =
          response.headers["authorization"] ||
          response.headers["x-auth-token"] ||
          (response.data && response.data.token);

        if (response.status === 204) {
          if (token) {
            localStorage.setItem("token", token.replace("Bearer ", ""));
            return { token: token.replace("Bearer ", "") };
          }
        } else if (response.data && response.data.token) {
          localStorage.setItem("token", response.data.token);
          return response.data;
        } else {
          throw new Error("Invalid response format - token not found");
        }
      } catch (innerError: any) {
        // Fallback to the proxied API endpoint if the server-side route fails
        const response = await api.post(
          "/authorization/getToken",
          credentials,
          {
            validateStatus: (status) => status >= 200 && status < 500,
          }
        );

        // Check for token in response or headers
        const token =
          response.headers["authorization"] ||
          response.headers["x-auth-token"] ||
          (response.data && response.data.token);

        if (response.status === 204) {
          if (token) {
            localStorage.setItem("token", token.replace("Bearer ", ""));
            return { token: token.replace("Bearer ", "") };
          }
        } else if (response.data && response.data.token) {
          localStorage.setItem("token", response.data.token);
          return response.data;
        } else {
          // If we still don't have a token, this is an error
          throw new Error("Authentication failed - could not acquire token");
        }
      }
    }
    throw new Error("Authentication failed");
  },

  isAuthenticated(): boolean {
    const token = localStorage.getItem("token");
    if (!token) return false;

    try {
      // Check if token has expired
      const payload = JSON.parse(atob(token.split(".")[1]));
      const expiry = payload.exp * 1000; // Convert to milliseconds
      if (Date.now() >= expiry) {
        localStorage.removeItem("token");
        return false;
      }
      return true;
    } catch (e) {
      localStorage.removeItem("token");
      return false;
    }
  },

  getToken(): string | null {
    return localStorage.getItem("token");
  },

  logout(): void {
    localStorage.removeItem("token");
    localStorage.removeItem("selectedCompany");
    localStorage.removeItem("selectedBranch");
  },
};
</file>

<file path="src/lib/api/axios.ts">
import axios from "axios";

// Create an Axios instance with default configs
const api = axios.create({
  baseURL: "/api",
  headers: {
    "Content-Type": "application/json",
    "Accept": "application/json",
  },
});

// Add a request interceptor to add the authorization token to requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = token.startsWith("Bearer ")
        ? token
        : `Bearer ${token}`;
    }    
    
    const selectedCompany = localStorage.getItem("selectedCompany");
    if (selectedCompany) {
      config.headers["x-company"] = selectedCompany;
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Add a response interceptor to handle errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', {
      status: error.response?.status,
      data: error.response?.data,
      config: {
        url: error.config?.url,
        method: error.config?.method,
        params: error.config?.params,
        headers: error.config?.headers
      }
    });
    return Promise.reject(error);
  }
);

export default api;
</file>

<file path="src/lib/api/index.ts">
export * from "./auth";
export * from "./company";
export * from "./classroom";
export { default as api } from "./axios";
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/middleware.ts">
import { NextRequest, NextResponse } from "next/server";

// This middleware function will add CORS headers to responses
export function middleware(request: NextRequest) {
  // Clone the request headers
  const requestHeaders = new Headers(request.headers);

  // Get the origin from the request
  const origin = requestHeaders.get("origin") || "*";

  // Create a new response with the CORS headers
  const response = NextResponse.next({
    request: {
      // Pass through the original headers
      headers: requestHeaders,
    },
  });

  // Add CORS headers for all routes starting with /api
  if (
    request.nextUrl.pathname.startsWith("/api") ||
    request.nextUrl.pathname.startsWith("/auth/token")
  ) {
    // Add CORS headers
    response.headers.set("Access-Control-Allow-Origin", origin);
    response.headers.set(
      "Access-Control-Allow-Methods",
      "GET, POST, PUT, DELETE, OPTIONS"
    );
    response.headers.set(
      "Access-Control-Allow-Headers",
      "Content-Type, Authorization, X-Requested-With"
    );
    response.headers.set("Access-Control-Allow-Credentials", "true");

    // Handle preflight requests
    if (request.method === "OPTIONS") {
      return new Response(null, {
        status: 204,
        headers: response.headers,
      });
    }
  }

  return response;
}

// Configure the middleware to run only for API routes and auth token route
export const config = {
  matcher: ["/api/:path*", "/auth/token"],
};
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/components/classroom-schedule-calendar.tsx">
"use client";

import { useState, useEffect, useRef } from "react";
import { useStaff } from "@/context/staff-context";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Calendar } from "@/components/ui/calendar";
import { Classroom } from "@/lib/api/classroom";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { format, isSameDay } from "date-fns";
import { vi } from "date-fns/locale";
import {
  Clock,
  MapPin,
  Users,
  BookOpen,
  Calendar as CalendarIcon,
  ChevronLeft,
  ChevronRight,
  LayoutGrid,
  List,
} from "lucide-react";
import Link from "next/link";

// Days of week in Vietnamese
const DAYS_OF_WEEK = [
  "Chủ nhật",
  "Thứ 2",
  "Thứ 3",
  "Thứ 4",
  "Thứ 5",
  "Thứ 6",
  "Thứ 7",
];

// Day abbreviations in Vietnamese
const DAYS_SHORT = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];

// Hour slots for the schedule (5AM to 10PM)
const HOURS = Array.from({ length: 18 }, (_, i) => i + 5);

interface ScheduledClass {
  id: string;
  classId: string;
  subjectName: string;
  roomId: string;
  teacherName: string;
  startTime: string;
  endTime: string;
  day: number;
  color: string;
  studentCount?: number;
  status?: "upcoming" | "past" | "current";
}

interface ValidSchedule {
  classRoomCode: string | null;
  dayOfWeek: number;
  beginTime: string;
  finishTime: string;
  validFrom: Date | null;
  validTo: Date | null;
  type: "schedule" | "schoolShift";
}

interface CombinedSchedule extends ScheduledClass {
  validFrom?: Date | null;
  validTo?: Date | null;
  type: "schedule" | "schoolShift";
}

type CalendarView = "day" | "week" | "month" | "list";

interface ClassScheduleCalendarProps {
  classrooms: Classroom[];
  initialView?: CalendarView;
  initialDate?: Date;
  onViewChange?: (view: CalendarView) => void;
  onDateChange?: (date: Date) => void;
  showAllClasses?: boolean;
}

export default function ClassScheduleCalendar({
  classrooms,
  initialView = "week",
  initialDate = new Date(),
  onViewChange,
  onDateChange,
  showAllClasses = false,
}: ClassScheduleCalendarProps) {
  const [date, setDate] = useState<Date>(initialDate);
  const [view, setView] = useState<CalendarView>(initialView);
  const [scheduledClasses, setScheduledClasses] = useState<ScheduledClass[]>(
    []
  );
  const [selectedClass, setSelectedClass] = useState<ScheduledClass | null>(
    null
  );
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [displayDates, setDisplayDates] = useState<Date[]>([]);
  const [calendarIsOpen, setCalendarIsOpen] = useState(false);
  const [autoTransition, setAutoTransition] = useState(false);
  const autoTransitionInterval = useRef<NodeJS.Timeout | undefined>(undefined);
  const { staff, loading: staffLoading } = useStaff();

  // Enhanced color palette with better contrast and more distinct colors
  const colors = [
    "bg-blue-100 text-blue-800 border-blue-300 hover:bg-blue-200",
    "bg-purple-100 text-purple-800 border-purple-300 hover:bg-purple-200",
    "bg-rose-100 text-rose-800 border-rose-300 hover:bg-rose-200",
    "bg-emerald-100 text-emerald-800 border-emerald-300 hover:bg-emerald-200",
    "bg-amber-100 text-amber-800 border-amber-300 hover:bg-amber-200",
    "bg-indigo-100 text-indigo-800 border-indigo-300 hover:bg-indigo-200",
    "bg-orange-100 text-orange-800 border-orange-300 hover:bg-orange-200",
    "bg-teal-100 text-teal-800 border-teal-300 hover:bg-teal-200",
    "bg-fuchsia-100 text-fuchsia-800 border-fuchsia-300 hover:bg-fuchsia-200",
    "bg-lime-100 text-lime-800 border-lime-300 hover:bg-lime-200",
  ]; // Handle date change with callback
  const handleDateChange = (newDate: Date) => {
    const updatedDate = new Date(newDate);
    setDate(updatedDate);

    // Trigger the callback to allow parent component to refresh data
    onDateChange?.(updatedDate);

    // Clear and re-process schedules immediately when date changes
    setScheduledClasses([]);
    if (!staffLoading && classrooms) {
      processSchedules(classrooms);
    }
  };

  // Handle view change with callback
  const handleViewChange = (newView: CalendarView) => {
    setView(newView);
    onViewChange?.(newView);
  };
  // Process classrooms into scheduled classes
  const processSchedules = (classroomsToProcess: Classroom[]) => {
    const subjectColorMap = new Map();
    const processed: CombinedSchedule[] = [];

    classroomsToProcess.forEach((classroom) => {
      // Check if user has access to this classroom
      if (
        !(showAllClasses ||
        (!staffLoading && staff && 
         (classroom.teacherCode === staff?.userId || 
          (classroom.supporter && classroom.supporter.includes(staff?.userId)))))
      ) {
        return;
      }

      // Get all valid schedules for this classroom
      const validSchedules = getCombinedSchedules(classroom);
      
      if (validSchedules.length > 0) {
        // Assign a consistent color based on subject name
        let color = subjectColorMap.get(classroom.subjectName);
        if (!color) {
          color = colors[subjectColorMap.size % colors.length];
          subjectColorMap.set(classroom.subjectName, color);
        }

        validSchedules.forEach((schedule, index) => {
          // Check if the schedule is valid for the current date range
          if (!isDateInRange(date, schedule.validFrom, schedule.validTo)) {
            return;
          }

          const status = isUpcoming(schedule.beginTime, schedule.dayOfWeek);
          if (status === "past") {
            return;
          }

          processed.push({
            id: `${classroom.classID}-${index}-${schedule.type}`,
            classId: classroom.classID,
            subjectName: classroom.subjectName,
            roomId: schedule.classRoomCode || "N/A",
            teacherName: classroom.teacherName || "N/A",
            startTime: schedule.beginTime,
            endTime: schedule.finishTime,
            day: schedule.dayOfWeek,
            color,
            studentCount: classroom.studentNumber || 0,
            status,
            validFrom: schedule.validFrom,
            validTo: schedule.validTo,
            type: schedule.type
          });
        });
      }
    });

    setScheduledClasses(processed);
  };
  // Process classrooms to extract scheduled classes whenever dependencies change
  useEffect(() => {
    if (!staffLoading && classrooms) {
      setScheduledClasses([]); // Clear existing schedules
      processSchedules(classrooms);
    }
  }, [classrooms, staff, staffLoading, showAllClasses, date]);

  // Re-process schedules when date changes
  useEffect(() => {
    if (classrooms && classrooms.length > 0) {
      setScheduledClasses([]); // Clear existing schedules
      processSchedules(classrooms);
    }
  }, [date]);

  // Update display dates based on selected date and view
  useEffect(() => {
    // Calculate display dates based on selected date and view
    if (view === "day") {
      setDisplayDates([date]);
    } else if (view === "week") {
      // For week view, find the Sunday of the current week
      const dayOfWeek = date.getDay();
      const diff = date.getDate() - dayOfWeek;
      const sunday = new Date(date);
      sunday.setDate(diff);

      // Create array of dates for the week
      const weekDates = Array.from({ length: 7 }, (_, i) => {
        const d = new Date(sunday);
        d.setDate(sunday.getDate() + i);
        return d;
      });

      setDisplayDates(weekDates);
    } else if (view === "month") {
      // For month view, generate all dates in the current month
      const year = date.getFullYear();
      const month = date.getMonth();
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);

      // Get the first Sunday before or on the first day of the month
      const startDate = new Date(firstDay);
      const firstDayOfWeek = firstDay.getDay();
      startDate.setDate(firstDay.getDate() - firstDayOfWeek);

      // Get the last Saturday after or on the last day of the month
      const endDate = new Date(lastDay);
      const lastDayOfWeek = lastDay.getDay();
      endDate.setDate(lastDay.getDate() + (6 - lastDayOfWeek));

      // Create array of all dates to display
      const days = [];
      let current = new Date(startDate);
      while (current <= endDate) {
        days.push(new Date(current));
        current.setDate(current.getDate() + 1);
      }

      setDisplayDates(days);
    } else {
      // List view - show week based on selected date
      const dayOfWeek = date.getDay();
      const sunday = new Date(date);
      sunday.setDate(date.getDate() - dayOfWeek);

      const weekDates = Array.from({ length: 7 }, (_, i) => {
        const d = new Date(sunday);
        d.setDate(sunday.getDate() + i);
        return d;
      });
      setDisplayDates(weekDates);
    }
  }, [date, view]);

  useEffect(() => {
    if (autoTransition) {
      // Clear any existing interval
      if (autoTransitionInterval.current) {
        clearInterval(autoTransitionInterval.current);
      }

      // Set new interval to transition every 5 seconds
      autoTransitionInterval.current = setInterval(() => {
        const newDate = new Date(date);
        if (view === "day") {
          newDate.setDate(date.getDate() + 1);
        } else if (view === "week") {
          newDate.setDate(date.getDate() + 7);
        } else if (view === "month") {
          newDate.setMonth(date.getMonth() + 1);
        }
        setDate(newDate);
        onDateChange?.(newDate);
      }, 5000);
    } else {
      // Clear interval when auto-transition is disabled
      if (autoTransitionInterval.current) {
        clearInterval(autoTransitionInterval.current);
        autoTransitionInterval.current = undefined;
      }
    }

    // Cleanup on unmount
    return () => {
      if (autoTransitionInterval.current) {
        clearInterval(autoTransitionInterval.current);
      }
    };
  }, [autoTransition, date, view, onDateChange]);

  const handleClassClick = (classItem: ScheduledClass) => {
    setSelectedClass(classItem);
    setIsDialogOpen(true);
  };

  // Get the time duration of a class in hours
  const getClassTimePeriod = (startTime: string, endTime: string) => {
    const start =
      parseInt(startTime.split(":")[0]) +
      parseInt(startTime.split(":")[1]) / 60;
    const end =
      parseInt(endTime.split(":")[0]) + parseInt(endTime.split(":")[1]) / 60;
    return end - start;
  };

  // Get the position of a class on the time grid
  const getClassPosition = (startTime: string) => {
    const [hours, minutes] = startTime.split(":").map(Number);
    // Calculate position based on 5AM (index 0) as the start time
    return hours - 5 + minutes / 60;
  };

  // Filter classes for the selected display dates
  const getClassesForDate = (date: Date) => {
    return scheduledClasses.filter(
      (classItem) => classItem.day === date.getDay()
    );
  };

  // Format time for display (e.g., "09:00" to "09:00")
  const formatTime = (time: string) => {
    return time.slice(0, 5);
  };

  // Calculate day classes with their groups for better overlap handling
  const getDayClassGroups = (dayClasses: ScheduledClass[]) => {
    if (!dayClasses.length) return [];

    // Sort classes by start time
    const sortedClasses = [...dayClasses].sort((a, b) => {
      return getClassPosition(a.startTime) - getClassPosition(b.startTime);
    });

    // Group overlapping classes together using a more precise algorithm
    const groups: ScheduledClass[][] = [];

    for (let i = 0; i < sortedClasses.length; i++) {
      const current = sortedClasses[i];
      const currentStart = getClassPosition(current.startTime);
      const currentEnd =
        currentStart + getClassTimePeriod(current.startTime, current.endTime);

      // Try to find an existing group where this class can fit
      let foundGroup = false;

      for (const group of groups) {
        // Check if this class overlaps with any class in the current group
        const overlaps = group.some((cls) => {
          const clsStart = getClassPosition(cls.startTime);
          const clsEnd =
            clsStart + getClassTimePeriod(cls.startTime, cls.endTime);

          // Check for any time overlap
          return currentStart < clsEnd && currentEnd > clsStart;
        });

        if (!overlaps) {
          // If no overlap, add to this group
          group.push(current);
          foundGroup = true;
          break;
        }
      }

      // If couldn't fit in any existing group, create a new one
      if (!foundGroup) {
        groups.push([current]);
      }
    }

    return groups;
  };

  // Render week view
  const renderWeekView = () => {
    return (
      <div className="grid grid-cols-7 gap-px h-[700px] border rounded-md overflow-hidden bg-border">
        {displayDates.map((displayDate, dayIndex) => (
          <div key={dayIndex} className="flex flex-col h-full bg-card">
            <div
              className={`text-center py-2 font-medium ${
                isSameDay(displayDate, new Date())
                  ? "bg-primary text-primary-foreground"
                  : "bg-muted/20"
              }`}
            >
              <div>{DAYS_OF_WEEK[displayDate.getDay()]}</div>
              <div className="text-sm">{format(displayDate, "dd/MM")}</div>
            </div>
            <div className="flex-1 relative overflow-hidden">
              {HOURS.map((hour) => (
                <div
                  key={hour}
                  className="absolute w-full border-t border-border/30"
                  style={{ top: `${((hour - 5) / 18) * 100}%` }}
                >
                  <div className="text-xs text-muted-foreground -mt-2 ml-1">
                    {hour}:00
                  </div>
                </div>
              ))}

              {(() => {
                const dayClasses = scheduledClasses.filter(
                  (classItem) => classItem.day === displayDate.getDay()
                );

                // Helper function to check if two classes overlap
                const doClassesOverlap = (
                  a: ScheduledClass,
                  b: ScheduledClass
                ) => {
                  const aStart = getClassPosition(a.startTime);
                  const aEnd =
                    aStart + getClassTimePeriod(a.startTime, a.endTime);
                  const bStart = getClassPosition(b.startTime);
                  const bEnd =
                    bStart + getClassTimePeriod(b.startTime, b.endTime);
                  return !(aEnd <= bStart || bEnd <= aStart);
                };

                // Group overlapping classes
                const classGroups: ScheduledClass[][] = [];
                dayClasses.forEach((classItem) => {
                  // Try to find an existing group for this class
                  let foundGroup = false;
                  for (const group of classGroups) {
                    if (
                      !group.some((existingClass) =>
                        doClassesOverlap(existingClass, classItem)
                      )
                    ) {
                      group.push(classItem);
                      foundGroup = true;
                      break;
                    }
                  }
                  // If no suitable group found, create a new one
                  if (!foundGroup) {
                    classGroups.push([classItem]);
                  }
                });

                return classGroups.map((group, groupIndex) => {
                  return group.map((classItem, itemIndex) => {
                    const startPosition = getClassPosition(classItem.startTime);
                    const duration = getClassTimePeriod(
                      classItem.startTime,
                      classItem.endTime
                    );

                    // Calculate width and position for overlapping items
                    const itemWidth = 92 / group.length; // Leave small margin on edges
                    const leftPosition = itemIndex * itemWidth + 4; // Start from 4% margin

                    return (
                      <TooltipProvider key={classItem.id}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div
                              className={`absolute rounded-md border shadow-sm p-1.5 overflow-hidden cursor-pointer transition-all hover:brightness-95 hover:shadow-md ${classItem.color}`}
                              style={{
                                top: `${(startPosition / 18) * 100}%`,
                                height: `${(duration / 18) * 100}%`,
                                left: `${leftPosition}%`,
                                width: `${itemWidth - 1}%`, // -1 for gap
                                minHeight: "30px",
                                zIndex: 10 + itemIndex,
                              }}
                              onClick={() => handleClassClick(classItem)}
                            >
                              <div className="space-y-0.5">
                                <div className="font-medium truncate">
                                  {classItem.subjectName}
                                </div>
                                <div className="text-xs truncate">
                                  {classItem.classId}
                                </div>
                                <div className="text-xs truncate">
                                  {formatTime(classItem.startTime)} -{" "}
                                  {formatTime(classItem.endTime)}
                                </div>
                                {classItem.status === "upcoming" && (
                                  <Badge variant="outline" className="mt-1">
                                    Sắp tới
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </TooltipTrigger>
                          <TooltipContent side="right" className="max-w-xs p-2">
                            <div className="space-y-1.5">
                              <p className="font-medium">
                                {classItem.subjectName}
                              </p>
                              <div className="grid gap-1 text-xs">
                                <p className="flex items-center">
                                  <BookOpen className="h-3 w-3 mr-1.5 opacity-70" />
                                  Mã lớp: {classItem.classId}
                                </p>
                                <p className="flex items-center">
                                  <MapPin className="h-3 w-3 mr-1.5 opacity-70" />
                                  Phòng: {classItem.roomId}
                                </p>
                                <p className="flex items-center">
                                  <Users className="h-3 w-3 mr-1.5 opacity-70" />
                                  Giáo viên: {classItem.teacherName}
                                </p>
                                <p className="flex items-center">
                                  <Clock className="h-3 w-3 mr-1.5 opacity-70" />
                                  {formatTime(classItem.startTime)} -{" "}
                                  {formatTime(classItem.endTime)}
                                </p>
                                {classItem.status && (
                                  <Badge variant="outline">
                                    {classItem.status === "upcoming"
                                      ? "Sắp tới"
                                      : classItem.status}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    );
                  });
                });
              })()}
            </div>
          </div>
        ))}
      </div>
    );
  };

  // Render day view
  const renderDayView = () => {
    const dayDate = displayDates[0];
    const dayOfWeek = dayDate.getDay();

    return (
      <div className="h-[700px] relative border rounded-md overflow-hidden bg-card">
        <div
          className={`text-center py-3 font-medium border-b ${
            isSameDay(dayDate, new Date())
              ? "bg-primary text-primary-foreground"
              : "bg-muted/20"
          }`}
        >
          <div className="text-lg">{DAYS_OF_WEEK[dayOfWeek]}</div>
          <div
            className={
              isSameDay(dayDate, new Date())
                ? "text-primary-foreground/80"
                : "text-muted-foreground"
            }
          >
            {format(dayDate, "dd MMMM yyyy", { locale: vi })}
          </div>
        </div>
        <div className="relative h-[calc(100%-60px)]">
          {HOURS.map((hour) => (
            <div
              key={hour}
              className="flex absolute w-full h-[5.55%] border-t border-border/30"
              style={{ top: `${((hour - 5) / 18) * 100}%` }}
            >
              <div className="w-16 text-xs text-muted-foreground flex items-start justify-center pt-1 border-r border-border/30">
                {hour}:00
              </div>
              <div className="flex-1"></div>
            </div>
          ))}

          {(() => {
            const dayClasses = scheduledClasses.filter(
              (classItem) => classItem.day === dayOfWeek
            );

            const classGroups = getDayClassGroups(dayClasses);

            return classGroups.map((group, groupIndex) => {
              // Calculate how many classes are in this group for width distribution
              const groupSize = group.length;

              return group.map((classItem, itemIndex) => {
                const startPosition = getClassPosition(classItem.startTime);
                const duration = getClassTimePeriod(
                  classItem.startTime,
                  classItem.endTime
                );

                // Improved width calculation with margins between items
                const totalWidthPercentage = 84; // 100 - 16 (time column)
                const margin = groupSize > 1 ? 2 : 0; // Margin between items
                const itemWidth =
                  (totalWidthPercentage - margin * (groupSize - 1)) / groupSize;

                // Calculate the left position with margins
                const leftPosition = 16 + itemIndex * (itemWidth + margin);

                // Ensure minimum height for very short classes
                const minHeight = Math.max(60, duration * 20);

                return (
                  <TooltipProvider key={classItem.id}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <div
                          key={classItem.id}
                          className={`absolute rounded-md border-2 shadow-sm p-2 overflow-hidden cursor-pointer transition-all hover:brightness-95 hover:shadow-md ${classItem.color}`}
                          style={{
                            top: `${(startPosition / 18) * 100}%`,
                            height: `${(duration / 18) * 100}%`,
                            left: `${leftPosition}%`,
                            width: `${itemWidth}%`,
                            minHeight: `${minHeight}px`,
                            zIndex: 10 + itemIndex,
                          }}
                          onClick={() => handleClassClick(classItem)}
                        >
                          <div className="font-medium truncate">
                            {classItem.subjectName}
                          </div>
                          <div className="text-sm truncate">
                            Mã lớp: {classItem.classId}
                          </div>
                          <div className="text-sm truncate">
                            Phòng: {classItem.roomId}
                          </div>
                          <div className="text-sm truncate mt-1 flex items-center">
                            <Clock className="inline h-3 w-3 mr-1" />
                            {formatTime(classItem.startTime)} -{" "}
                            {formatTime(classItem.endTime)}
                          </div>
                          {duration > 1.5 && (
                            <div className="text-sm truncate mt-1 flex items-center">
                              <Users className="inline h-3 w-3 mr-1" />
                              {classItem.studentCount || "N/A"} học sinh
                            </div>
                          )}
                        </div>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="max-w-xs">
                        <div className="space-y-1">
                          <p className="font-medium">{classItem.subjectName}</p>
                          <p className="text-xs flex items-center">
                            <BookOpen className="h-3 w-3 mr-1 inline" />
                            Mã lớp: {classItem.classId}
                          </p>
                          <p className="text-xs flex items-center">
                            <MapPin className="h-3 w-3 mr-1 inline" />
                            Phòng: {classItem.roomId}
                          </p>
                          <p className="text-xs flex items-center">
                            <Users className="h-3 w-3 mr-1 inline" />
                            Giáo viên: {classItem.teacherName}
                          </p>
                          <p className="text-xs flex items-center">
                            <Clock className="h-3 w-3 mr-1 inline" />
                            {formatTime(classItem.startTime)} -{" "}
                            {formatTime(classItem.endTime)}
                          </p>
                          {classItem.status && (
                            <Badge variant="outline">
                              {classItem.status === "upcoming"
                                ? "Sắp tới"
                                : classItem.status}
                            </Badge>
                          )}
                        </div>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                );
              });
            });
          })()}
        </div>
      </div>
    );
  };

  // Render month view
  const renderMonthView = () => {
    // Group dates by week for display
    const weeks: Date[][] = [];
    let currentWeek: Date[] = [];

    displayDates.forEach((date, index) => {
      currentWeek.push(date);

      if (currentWeek.length === 7 || index === displayDates.length - 1) {
        weeks.push([...currentWeek]);
        currentWeek = [];
      }
    });

    return (
      <div className="border rounded-md overflow-hidden bg-card">
        {/* Month header */}
        <div className="bg-muted/20 font-medium p-3 text-center border-b">
          {format(
            new Date(date.getFullYear(), date.getMonth(), 1),
            "MMMM yyyy",
            { locale: vi }
          )}
        </div>

        {/* Day headers */}
        <div className="grid grid-cols-7 bg-muted/10 text-center py-2 border-b">
          {DAYS_SHORT.map((day, index) => (
            <div key={index} className="text-xs font-medium">
              {day}
            </div>
          ))}
        </div>

        {/* Calendar grid */}
        <div className="bg-card">
          {weeks.map((week, weekIndex) => (
            <div
              key={weekIndex}
              className="grid grid-cols-7 border-b last:border-b-0"
            >
              {week.map((day, dayIndex) => {
                const isCurrentMonth = day.getMonth() === date.getMonth();
                const isToday = isSameDay(day, new Date());
                const dayClasses = getClassesForDate(day);

                return (
                  <div
                    key={dayIndex}
                    className={`min-h-[120px] border-r last:border-r-0 p-1 ${
                      isCurrentMonth ? "" : "bg-muted/10 text-muted-foreground"
                    } ${isToday ? "ring-2 ring-primary ring-inset" : ""}`}
                  >
                    <div className="text-right text-xs p-1">
                      {format(day, "d")}
                    </div>

                    <ScrollArea className="h-[90px]">
                      <div className="space-y-1 px-1">
                        {dayClasses.length > 0 ? (
                          dayClasses.map((classItem) => (
                            <div
                              key={classItem.id}
                              onClick={() => handleClassClick(classItem)}
                              className={`text-xs p-1 rounded cursor-pointer ${classItem.color}`}
                            >
                              <div className="font-medium truncate">
                                {formatTime(classItem.startTime)} -{" "}
                                {formatTime(classItem.endTime)}
                              </div>
                              <div className="truncate">
                                {classItem.subjectName}
                              </div>
                            </div>
                          ))
                        ) : isCurrentMonth ? (
                          <div className="text-xs text-muted-foreground text-center py-2">
                            Không có lớp học
                          </div>
                        ) : null}
                      </div>
                    </ScrollArea>
                  </div>
                );
              })}
            </div>
          ))}
        </div>
      </div>
    );
  };

  // Render list view
  const renderListView = () => {
    // Use displayDates which now contains current week's dates
    return (
      <div className="space-y-6">
        {displayDates.map((day, dayIndex) => {
          const dayClasses = getClassesForDate(day);
          if (dayClasses.length === 0) return null;

          // Group classes by time slot to handle overlapping
          const timeGroups = new Map<string, ScheduledClass[]>();
          dayClasses.forEach((classItem) => {
            const timeKey = `${classItem.startTime}-${classItem.endTime}`;
            if (!timeGroups.has(timeKey)) {
              timeGroups.set(timeKey, []);
            }
            const group = timeGroups.get(timeKey);
            if (group) {
              group.push(classItem);
            }
          });

          const isToday = isSameDay(day, new Date());

          return (
            <Card key={dayIndex} className={isToday ? "border-primary" : ""}>
              <CardHeader className={`pb-2 ${isToday ? "bg-primary/5" : ""}`}>
                {" "}
                <CardTitle className="text-base flex items-center">
                  {/* <Calendar className="h-4 w-4 mr-2" /> */}
                  {format(day, "EEEE, dd/MM/yyyy", { locale: vi })}
                  {isToday && (
                    <Badge variant="default" className="ml-2">
                      Hôm nay
                    </Badge>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-4">
                <div className="grid gap-4">
                  {Array.from(timeGroups.entries())
                    .sort(([timeA], [timeB]) => {
                      const [startA] = timeA.split("-");
                      const [startB] = timeB.split("-");
                      return startA.localeCompare(startB);
                    })
                    .map(([timeKey, classes]) => {
                      const [startTime, endTime] = timeKey.split("-");
                      return (
                        <div key={timeKey} className="relative space-y-2">
                          <div className="flex items-center justify-between border-b pb-1">
                            <div className="flex items-center text-sm font-medium">
                              <Clock className="h-4 w-4 mr-1.5" />
                              {formatTime(startTime)} - {formatTime(endTime)}
                            </div>
                            {classes.length > 1 && (
                              <Badge variant="secondary" className="text-xs">
                                {classes.length} lớp cùng giờ
                              </Badge>
                            )}
                          </div>

                          <div className="grid gap-2">
                            {classes.map((classItem: ScheduledClass) => (
                              <div
                                key={classItem.id}
                                className={`p-3 rounded-md border ${classItem.color} cursor-pointer hover:brightness-95 transition-all`}
                                onClick={() => handleClassClick(classItem)}
                              >
                                <div className="grid sm:grid-cols-[1fr,auto] gap-3">
                                  <div className="space-y-1">
                                    <div className="font-medium">
                                      {classItem.subjectName}
                                    </div>
                                    <div className="flex flex-wrap gap-3">
                                      <div className="flex items-center text-sm">
                                        <BookOpen className="h-3.5 w-3.5 mr-1.5 opacity-70" />
                                        {classItem.classId}
                                      </div>
                                      <div className="flex items-center text-sm">
                                        <MapPin className="h-3.5 w-3.5 mr-1.5 opacity-70" />
                                        {classItem.roomId}
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex items-center gap-3">
                                    <div className="flex items-center text-sm">
                                      <Users className="h-3.5 w-3.5 mr-1.5 opacity-70" />
                                      {classItem.studentCount || "N/A"} học sinh
                                    </div>
                                  </div>
                                </div>
                                <div className="mt-2 pt-2 border-t text-sm flex items-center text-muted-foreground">
                                  <Users className="h-3.5 w-3.5 mr-1.5" />
                                  Giáo viên: {classItem.teacherName}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      );
                    })}
                </div>
              </CardContent>
            </Card>
          );
        })}

        {!displayDates.some((day) => getClassesForDate(day).length > 0) && (
          <div className="text-center py-12 text-muted-foreground">
            <CalendarIcon className="h-12 w-12 mx-auto mb-3 opacity-20" />
            <p>Không có lớp học nào trong tuần này</p>
          </div>
        )}
      </div>
    );
  };

  return (
    <Card className="w-full">
      <CardHeader className="space-y-1">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <CardTitle>Lịch học</CardTitle>
          <div className="flex flex-wrap items-center gap-2">
            {" "}
            <Tabs
              value={view}
              onValueChange={(value) => handleViewChange(value as CalendarView)}
              className="w-fit"
            >
              <TabsList>
                <TabsTrigger value="day" className="text-xs px-2 sm:px-3">
                  <span className="hidden sm:inline">Ngày</span>
                  <Calendar className="h-4 w-4 sm:hidden" />
                </TabsTrigger>
                <TabsTrigger value="week" className="text-xs px-2 sm:px-3">
                  <span className="hidden sm:inline">Tuần</span>
                  <LayoutGrid className="h-4 w-4 sm:hidden" />
                </TabsTrigger>
                <TabsTrigger value="month" className="text-xs px-2 sm:px-3">
                  <span className="hidden sm:inline">Tháng</span>
                  <CalendarIcon className="h-4 w-4 sm:hidden" />
                </TabsTrigger>
                <TabsTrigger value="list" className="text-xs px-2 sm:px-3">
                  <span className="hidden sm:inline">Danh sách</span>
                  <List className="h-4 w-4 sm:hidden" />
                </TabsTrigger>
              </TabsList>
            </Tabs>
            <div className="relative">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCalendarIsOpen(!calendarIsOpen)}
                className="text-xs gap-1"
              >
                <CalendarIcon className="h-3.5 w-3.5" />
                <span className="hidden sm:inline">
                  {view === "month"
                    ? format(date, "MM/yyyy")
                    : format(date, "dd/MM/yyyy")}
                </span>
                <span className="sm:hidden">{format(date, "dd/MM")}</span>
              </Button>

              {calendarIsOpen && (
                <div className="absolute z-50 mt-1 right-0 bg-background border rounded-md shadow-md">
                  <Calendar
                    mode="single"
                    selected={date}
                    onSelect={(date) => {
                      if (date) {
                        handleDateChange(date);
                        setCalendarIsOpen(false);
                      }
                    }}
                    initialFocus
                  />
                </div>
              )}
            </div>
            <div className="flex gap-1">
              <Button
                variant="outline"
                size="icon"
                onClick={() => {
                  const newDate = new Date(date);
                  if (view === "day") newDate.setDate(newDate.getDate() - 1);
                  else if (view === "week")
                    newDate.setDate(newDate.getDate() - 7);
                  else if (view === "month")
                    newDate.setMonth(newDate.getMonth() - 1);
                  else if (view === "list")
                    newDate.setDate(newDate.getDate() - 7);
                  handleDateChange(newDate);
                }}
              >
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  const newDate = new Date();
                  handleDateChange(newDate);
                }}
                className="text-xs"
              >
                Hôm nay
              </Button>
              <Button
                variant="outline"
                size="icon"
                onClick={() => {
                  const newDate = new Date(date);
                  if (view === "day") newDate.setDate(newDate.getDate() + 1);
                  else if (view === "week")
                    newDate.setDate(newDate.getDate() + 7);
                  else if (view === "month")
                    newDate.setMonth(newDate.getMonth() + 1);
                  else if (view === "list")
                    newDate.setDate(newDate.getDate() + 7);
                  handleDateChange(newDate);
                }}
              >
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {scheduledClasses.length === 0 ? (
          <div className="py-20 text-center text-muted-foreground">
            <CalendarIcon className="mx-auto h-10 w-10 mb-2 opacity-50" />
            <p>Không có lịch học nào cho thời gian đã chọn</p>
          </div>
        ) : view === "day" ? (
          renderDayView()
        ) : view === "week" ? (
          renderWeekView()
        ) : view === "month" ? (
          renderMonthView()
        ) : (
          renderListView()
        )}

        {/* Class Detail Dialog */}
        {selectedClass && (
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle className="text-xl">
                  {selectedClass.subjectName}
                </DialogTitle>
                <DialogDescription>
                  Chi tiết lớp học {selectedClass.classId}
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="flex items-center gap-4">
                  <div className="rounded-full bg-blue-100 p-3 text-blue-600">
                    <BookOpen className="h-5 w-5" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Môn học</p>
                    <p className="font-medium">{selectedClass.subjectName}</p>
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <div className="rounded-full bg-amber-100 p-3 text-amber-600">
                    <Clock className="h-5 w-5" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Thời gian</p>
                    <p className="font-medium">
                      {DAYS_OF_WEEK[selectedClass.day]},{" "}
                      {formatTime(selectedClass.startTime)} -{" "}
                      {formatTime(selectedClass.endTime)}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <div className="rounded-full bg-green-100 p-3 text-green-600">
                    <MapPin className="h-5 w-5" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Phòng học</p>
                    <p className="font-medium">{selectedClass.roomId}</p>
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <div className="rounded-full bg-purple-100 p-3 text-purple-600">
                    <Users className="h-5 w-5" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Giáo viên</p>
                    <p className="font-medium">{selectedClass.teacherName}</p>
                  </div>
                </div>
                <div className="pt-4 flex justify-end">
                  <Button asChild variant="default">
                    <Link
                      href={`/dashboard/classrooms/${selectedClass.classId}`}
                    >
                      Xem chi tiết lớp học
                    </Link>
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        )}
      </CardContent>
    </Card>
  );
}

// Helper function to determine if a class is upcoming
const isUpcoming = (classTime: string, dayOfWeek: number) => {
  const now = new Date();
  const today = now.getDay();
  const [hours, minutes] = classTime.split(":").map(Number);
  const classDate = new Date();

  // If the class is in past days of the week
  if (dayOfWeek < today) {
    return "past";
  }

  // If the class is later in the week
  if (dayOfWeek > today) {
    return "upcoming";
  }

  // If the class is today, check the time
  if (dayOfWeek === today) {
    const currentHour = now.getHours();
    const currentMinutes = now.getMinutes();

    // Compare times
    if (
      hours > currentHour ||
      (hours === currentHour && minutes > currentMinutes)
    ) {
      return "upcoming";
    } else {
      return "past";
    }
  }

  return "past";
};

const isScheduleValid = (classroom: Classroom, scheduleDate: Date) => {
  // Kiểm tra ngày bắt đầu và kết thúc
  const startDate = classroom.startDate ? new Date(classroom.startDate) : null;
  const finishDate = classroom.finishDate
    ? new Date(classroom.finishDate)
    : null;
  const currentDate = new Date(scheduleDate);

  // Nếu không có ngày bắt đầu hoặc kết thúc, coi như hợp lệ
  if (!startDate || !finishDate) return true;

  // Reset time để so sánh chỉ ngày
  currentDate.setHours(0, 0, 0, 0);
  startDate.setHours(0, 0, 0, 0);
  finishDate.setHours(0, 0, 0, 0);

  // Kiểm tra xem ngày hiện tại có nằm trong khoảng hợp lệ
  return currentDate >= startDate && currentDate <= finishDate;
};

const isDateInRange = (
  date: Date,
  startDate: Date | null,
  endDate: Date | null
): boolean => {
  if (!startDate || !endDate) return true;

  const checkDate = new Date(date);
  const start = new Date(startDate);
  const end = new Date(endDate);

  // Reset time components for date comparison
  checkDate.setHours(0, 0, 0, 0);
  start.setHours(0, 0, 0, 0);
  end.setHours(0, 0, 0, 0);

  return checkDate >= start && checkDate <= end;
};

const getCombinedSchedules = (classroom: Classroom): ValidSchedule[] => {
  const validSchedules: ValidSchedule[] = [];

  // Process schoolShift schedules
  if (classroom.schoolShift && classroom.schoolShift.length > 0) {
    classroom.schoolShift.forEach((shift) => {
      if (shift.day !== undefined && shift.startTime && shift.endTime) {
        validSchedules.push({
          classRoomCode: shift.roomId || null,
          dayOfWeek: shift.day,
          beginTime: shift.startTime,
          finishTime: shift.endTime,
          validFrom: shift.date ? new Date(shift.date) : null,
          validTo: shift.expiryDate ? new Date(shift.expiryDate) : null,
          type: "schoolShift",
        });
      }
    });
  }

  // Process regular schedules
  if (classroom.schedule && classroom.schedule.length > 0) {
    classroom.schedule.forEach((schedule) => {
      if (
        schedule.dayOfWeek !== undefined &&
        schedule.beginTime &&
        schedule.finishTime
      ) {
        // Check if there's already a schoolShift entry for this time slot
        const hasOverlap = validSchedules.some(
          (vs) =>
            vs.dayOfWeek === schedule.dayOfWeek &&
            vs.beginTime === schedule.beginTime &&
            vs.finishTime === schedule.finishTime
        );

        if (!hasOverlap) {
          validSchedules.push({
            classRoomCode: schedule.classRoomCode || null,
            dayOfWeek: schedule.dayOfWeek,
            beginTime: schedule.beginTime,
            finishTime: schedule.finishTime,
            validFrom: classroom.startDate
              ? new Date(classroom.startDate)
              : null,
            validTo: classroom.finishDate
              ? new Date(classroom.finishDate)
              : null,
            type: "schedule",
          });
        }
      }
    });
  }

  return validSchedules;
};
</file>

<file path="src/components/company-select.tsx">
"use client";

import { useState, useEffect } from "react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { companyService, Company, Branch } from "@/lib/api/company";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface CompanySelectProps {
  onBranchSelect: (branchCode: string) => void;
}

export default function CompanySelect({ onBranchSelect }: CompanySelectProps) {
  const [companies, setCompanies] = useState<Company[]>([]);
  const [branches, setBranches] = useState<Branch[]>([]);
  const [selectedCompany, setSelectedCompany] = useState<string | null>(
    companyService.getSelectedCompany()
  );
  const [selectedBranch, setSelectedBranch] = useState<string | null>(
    companyService.getSelectedBranch()
  );
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch companies on mount
  useEffect(() => {
    const fetchCompanies = async () => {
      try {
        setIsLoading(true);
        const data = await companyService.getCompanies();
        setCompanies(data);

        // If there's a selectedCompany, load its branches
        if (selectedCompany) {
          loadBranches(selectedCompany);
        } else if (data.length > 0) {
          // Auto-select the first company if none is selected
          handleCompanySelect(data[0]._id);
        }
      } catch (err) {
        setError("Failed to load companies");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCompanies();
  }, []);

  // Load branches for a selected company
  const loadBranches = async (companyId: string) => {
    try {
      const data = await companyService.getBranches(companyId);
      setBranches(data);

      // If there's a stored selected branch and it belongs to this company, keep it selected
      const storedBranch = companyService.getSelectedBranch();
      const branchExists = data.some((branch) => branch.code === storedBranch);

      if (storedBranch && branchExists) {
        setSelectedBranch(storedBranch);
        onBranchSelect(storedBranch);
      } else if (data.length > 0) {
        // Auto-select the first branch if none is selected or current one doesn't belong to this company
        handleBranchSelect(data[0].code);
      } else {
        setSelectedBranch(null);
      }
    } catch (err) {
      setError("Failed to load branches");
    }
  };

  // Handle company selection
  const handleCompanySelect = (companyId: string) => {
    setSelectedCompany(companyId);
    companyService.setSelectedCompany(companyId);
    loadBranches(companyId);
  };

  // Handle branch selection
  const handleBranchSelect = (branchCode: string) => {
    setSelectedBranch(branchCode);
    companyService.setSelectedBranch(branchCode);
    onBranchSelect(branchCode);
  };

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle>Select Location</CardTitle>
      </CardHeader>
      <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <label htmlFor="company-select" className="text-sm font-medium">
            Company
          </label>
          <Select
            disabled={isLoading || companies.length === 0}
            value={selectedCompany || ""}
            onValueChange={handleCompanySelect}
          >
            <SelectTrigger id="company-select" className="w-full">
              <SelectValue placeholder="Select a company" />
            </SelectTrigger>
            <SelectContent>
              {companies.map((company) => (
                <SelectItem key={company._id} value={company._id}>
                  {company.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <label htmlFor="branch-select" className="text-sm font-medium">
            Branch
          </label>
          <Select
            disabled={isLoading || !selectedCompany || branches.length === 0}
            value={selectedBranch || ""}
            onValueChange={handleBranchSelect}
          >
            <SelectTrigger id="branch-select" className="w-full">
              <SelectValue placeholder="Select a branch" />
            </SelectTrigger>
            <SelectContent>
              {branches.map((branch) => (
                <SelectItem key={branch._id} value={branch.code}>
                  {branch.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/dashboard-header.tsx">
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";

interface DashboardHeaderProps {
  title: string;
  description?: string;
  className?: string;
}

export default function DashboardHeader({
  title,
  description,
  className = "",
}: DashboardHeaderProps) {
  const router = useRouter();

  // Check authentication on mount
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      router.push("/login");
      return;
    }
  }, [router]);

  return (
    <div className={`space-y-6 ${className}`}>
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">{title}</h1>
          {description && <p className="text-gray-500 mt-1">{description}</p>}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  );
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  );
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  );
}

export { Alert, AlertTitle, AlertDescription };
</file>

<file path="src/components/ui/avatar.tsx">
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  );
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span";

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  );
}

export { Badge, badgeVariants };
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  );
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  );
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  );
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  );
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  );
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
};
</file>

<file path="src/components/ui/dialog.tsx">
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};
</file>

<file path="src/components/ui/form.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
);

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField();

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? "") : props.children;

  if (!body) {
    return null;
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  );
}

export { Input };
</file>

<file path="src/components/ui/label.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";

import { cn } from "@/lib/utils";

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  );
}

export { Label };
</file>

<file path="src/components/ui/quick-stat-card.tsx">
import { Card, CardContent } from "@/components/ui/card";

interface QuickStatCardProps {
  title: string;
  value: string;
  description: string;
  icon: React.ReactNode;
  color: string;
}

export function QuickStatCard({
  title,
  value,
  description,
  icon,
  color,
}: QuickStatCardProps) {
  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-500">{title}</p>
            <p className="text-3xl font-bold">{value}</p>
            <p className="text-xs text-gray-500 mt-1">{description}</p>
          </div>
          <div className={`rounded-full p-3 ${color}`}>{icon}</div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/ui/select.tsx">
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default";
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};
</file>

<file path="src/components/ui/table.tsx">
"use client";

import * as React from "react";

import { cn } from "@/lib/utils";

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  );
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  );
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  );
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  );
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  );
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  );
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  );
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  );
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};
</file>

<file path="src/components/ui/tabs.tsx">
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  );
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  );
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  );
}

export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="src/components/ui/toggle-group.tsx">
"use client";

import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { cn } from "@/lib/utils";

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root>
>(({ className, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1",
      className
    )}
    {...props}
  />
));
ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Item
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-background data-[state=on]:text-foreground data-[state=on]:shadow-sm",
      className
    )}
    {...props}
  >
    {children}
  </ToggleGroupPrimitive.Item>
));
ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };
</file>

<file path="src/components/user-menu.tsx">
"use client";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { useAuth } from "@/context/auth-context";
import { LogOut, Building2, Phone, Mail } from "lucide-react";
import { useEffect, useState, useRef } from "react";
import { api } from "@/lib/api";

interface StaffInfo {
  _id: string;
  userId: string;
  name: string;
  displayName: string;
  phoneNumber: string;
  birthday: string;
  email: string;
  personalId: string;
  positionName: string;
  address: string;
  branch: string[];
  imageUrl: string | null;
  position: string;
  shortPermissionName: string;
}

export default function UserMenu() {
  const { logout } = useAuth();
  const [staff, setStaff] = useState<StaffInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const isFirstRender = useRef(true);

  const fetchStaffInfo = async () => {
    const token = localStorage.getItem("token");
    if (!token) return;

    try {
      setLoading(true);
      const response = await api.get("/user/staff/me");
      const [data] = response.data;
      setStaff(data);
    } catch (error) {
      console.error("Failed to fetch staff info:", error);
      setStaff(null);
    } finally {
      setLoading(false);
    }
  };

  // Load data on mount and token change
  useEffect(() => {
    fetchStaffInfo();

    // Add event listener for storage changes
    const handleStorageChange = (event: StorageEvent) => {
      if (event.key === "token") {
        fetchStaffInfo();
      }
    };

    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, []);

  // Refetch when component becomes visible
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible" && !isFirstRender.current) {
        fetchStaffInfo();
      }
      isFirstRender.current = false;
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);
    return () =>
      document.removeEventListener("visibilitychange", handleVisibilityChange);
  }, []);

  const getInitials = (name: string) => {
    return name
      .split(" ")
      .map((word) => word[0])
      .join("")
      .toUpperCase()
      .slice(0, 2);
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            {staff?.imageUrl ? (
              // eslint-disable-next-line @next/next/no-img-element
              <img
                src={staff.imageUrl}
                alt={staff.displayName}
                className="h-full w-full object-cover"
              />
            ) : (
              <AvatarFallback className="bg-blue-100 text-blue-600">
                {staff ? getInitials(staff.displayName) : "..."}
              </AvatarFallback>
            )}
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-80">
        <div className="flex flex-col p-2">
          <div className="flex flex-col space-y-1 leading-none">
            <p className="font-medium text-base">
              {loading ? "Đang tải..." : staff?.displayName}
            </p>
            <p className="text-xs text-muted-foreground">
              {staff?.positionName}
            </p>
            <p className="text-xs text-muted-foreground">
              {staff?.shortPermissionName}
            </p>
          </div>
          <div className="mt-2 flex flex-col gap-1 text-xs text-muted-foreground">
            <div className="flex items-center gap-1">
              <Building2 className="h-3 w-3" />
              <span>Mã nhân viên: {staff?.userId}</span>
            </div>
            <div className="flex items-center gap-1">
              <Mail className="h-3 w-3" />
              <span>{staff?.email}</span>
            </div>
            <div className="flex items-center gap-1">
              <Phone className="h-3 w-3" />
              <span>{staff?.phoneNumber}</span>
            </div>
          </div>
        </div>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="cursor-pointer text-red-600 focus:text-red-600"
          onClick={logout}
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>Đăng xuất</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="src/lib/api/company.ts">
import api from "./axios";

export interface Company {
  _id: string;
  name: string;
  shortName?: string;
  taxCode?: string;
  address?: string;
  regCode?: string;
  isActive?: boolean;
  branchList?: Branch[];
}

export interface Branch {
  _id: string;
  name: string;
  code: string;
  address?: string;
  isActive?: boolean;
  company?: string;
}

export const companyService = {
  getSelectedCompany(): string | null {
    if (typeof window === "undefined") return null;
    return localStorage.getItem("selectedCompany");
  },

  getSelectedBranch(): string | null {
    if (typeof window === "undefined") return null;
    return localStorage.getItem("selectedBranch");
  },

  getCachedBranches(): Branch[] {
    const branches = localStorage.getItem("cached_branches");
    if (branches) {
      try {
        return JSON.parse(branches);
      } catch (error) {
        console.error("Error parsing cached branches:", error);
        return [];
      }
    }
    return [];
  },

  setSelectedCompany(companyId: string) {
    localStorage.setItem("selectedCompany", companyId);
  },

  setSelectedBranch(branchCode: string) {
    localStorage.setItem("selectedBranch", branchCode);
  },

  async getCompanies(): Promise<Company[]> {
    try {
      // Check if we have a token first
      const token = localStorage.getItem("token");
      if (!token) {
        throw new Error("Unauthorized access. Please log in first.");
      }

      const response = await api.get("/company"); // Changed back to /company

      // Handle string responses (like "Unauthorized")
      if (typeof response.data === "string") {
        throw new Error(response.data);
      }

      // Check if we got HTML instead of JSON
      if (
        typeof response.data === "string" &&
        response.data.includes("<!DOCTYPE html>")
      ) {
        console.error(
          "Received HTML instead of JSON. API endpoint might be incorrect."
        );
        throw new Error("Invalid API response format");
      }

      // Handle different response formats
      let companies: any[] | null = null;

      if (response.data && typeof response.data === "object") {
        if (Array.isArray(response.data)) {
          companies = response.data;
        } else if (Array.isArray(response.data.data)) {
          companies = response.data.data;
        } else if (Array.isArray(response.data.companies)) {
          companies = response.data.companies;
        } else if (Array.isArray(response.data.items)) {
          companies = response.data.items;
        } else if (
          response.data.result &&
          Array.isArray(response.data.result)
        ) {
          companies = response.data.result;
        }
      }

      if (!companies) {
        console.error("Invalid company data format:", response.data);
        throw new Error("Unexpected company data format");
      }

      // Make the validation more lenient
      const validCompanies = companies
        .filter((company: any) => company && typeof company === "object")
        .map((company: any) => ({
          _id: company._id || company.id || "",
          name: company.name || company.companyName || "",
          shortName: company.shortName || company.short_name || "",
          isActive:
            typeof company.isActive === "boolean" ? company.isActive : true,
          branchList: company.branchList || company.branches || [],
        }))
        .filter((company) => company._id && company.name) as Company[];

      if (validCompanies.length === 0) {
        console.error("No valid companies found in:", companies);
        throw new Error("No valid companies found in response");
      }

      return validCompanies;
    } catch (error: any) {
      // Handle different error types
      if (error.response?.status === 401 || error.message === "Unauthorized") {
        window.location.href = "/login";
        throw new Error("Unauthorized access. Please log in again.");
      }

      if (error.response?.data?.message) {
        throw new Error(error.response.data.message);
      }

      throw error;
    }
  },

  async getBranches(companyId: string): Promise<Branch[]> {
    try {
      const response = await api.get(`/company/${companyId}/branch`);

      // Handle potential response formats
      if (response.data) {
        // If data is in a nested property
        const branches =
          response.data.data || response.data.branches || response.data;

        if (Array.isArray(branches)) {
          return branches;
        }
      }
      throw new Error("Unexpected branch data format");
    } catch (error: any) {
      if (error.response?.status === 401) {
        throw new Error("Unauthorized access. Please log in again.");
      }
      throw new Error(`Failed to load branches: ${error.message}`);
    }
  },
};
</file>

<file path="src/lib/api/teacher.ts">
import api from "./axios";
import { companyService } from "./company";

export interface TeacherSchedule {
  _id: string;
  classId: string;
  classID: string;
  startTime: string;
  endTime: string;
  day: number;
  roomId: string;
}

export interface TeacherSalary {
  hour: number;
  shift: number;
  day: number;
  month: number;
  type: number;
}

export interface Teacher {
  _id: string;
  STT?: number;
  staffId: string;
  name: string;
  imageUrl?: string;
  birthday?: string;
  phoneNumber?: string;
  email?: string;
  branch?: string[];
  address?: string;
  personalId?: string;
  leaveDate?: string | null;
  positionName?: string;
  baseSalary?: TeacherSalary;
  type?: number;
  schedule?: TeacherSchedule[];
  permission?: string;
  shortPermissionName?: string;
  educationBackground?: string;
  // Additional fields from API response
  userId?: string;
  userID?: string;
  directManager?: string | null;
  department?: string | null;
  moodleAccountId?: number;
  "8x8link"?: string;
  imageProfile?: string | null;
  "Mã Quản Lý"?: string;
  "Họ Và Tên"?: string;
  "Hình Ảnh"?: string;
  "Số Điện Thoại"?: string;
  "Ngày Sinh"?: string;
  "Địa Chỉ"?: string;
  CMND?: string;
  "Chức Vụ"?: string;
  "Ngày Nghỉ"?: string | null;
  "Lý Do Nghỉ"?: string | null;
  "Cơ Sở"?: string;
  position?: string;
}

export interface GetTeachersParams {
  getAll?: number;
  position?: string[];
  branch?: string;
  currentBranch?: string;
  page?: number;
  maxPage?: number;
  field?: {
    baseSalary?: boolean;
    schedule?: boolean;
  };
}

export const teacherService = {
  transformTeacherResponse(data: any): Teacher {
    return {
      _id: data._id,
      staffId: data.staffId || data["Mã Quản Lý"],
      name: data.name || data["Họ Và Tên"],
      imageUrl: data.imageUrl || data["Hình Ảnh"],
      birthday: data.birthday || data["Ngày Sinh"],
      phoneNumber: data.phoneNumber || data["Số Điện Thoại"],
      email: data.email,
      branch:
        data.branch || (data["Cơ Sở"] ? data["Cơ Sở"].split(",") : undefined),
      address: data.address || data["Địa Chỉ"],
      personalId: data.personalId || data["CMND"],
      leaveDate: data.leaveDate || data["Ngày Nghỉ"],
      positionName: data.positionName || data["Chức Vụ"],
      baseSalary: data.baseSalary,
      type: data.type,
      schedule: data.schedule,
      permission: data.permission,
      shortPermissionName: data.shortPermissionName,
      educationBackground: data.educationBackground,
      userId: data.userId || data.userID,
      directManager: data.directManager,
      department: data.department,
      moodleAccountId: data.moodleAccountId,
      "8x8link": data["8x8link"],
      position: data.position,
    };
  },
  async getTeachers(params: GetTeachersParams = {}): Promise<Teacher[]> {
    const branchCode = params.branch || companyService.getSelectedBranch();
    const companyId = companyService.getSelectedCompany();

    console.log("Selected branch code:", branchCode);
    console.log("Selected company ID:", companyId);

    if (!companyId) {
      throw new Error("Please select a company first");
    }

    if (!branchCode) {
      throw new Error("Please select a branch first");
    }

    let branchId: string;

    // First try to get branch from cached branches
    const cachedBranches: any = await companyService.getBranches(companyId);
    console.log("Cached branches:", cachedBranches);

    // Access the branches array correctly from the cached data structure
    // const branches = cachedBranches?.data?.[companyId];
    // if (!Array.isArray(branches)) {
    //   throw new Error("No branches found for the selected company");
    // }

    const branch = cachedBranches.find((b: any) => b.code === branchCode);
    branchId = branch?._id;

    if (!branchId) {
      throw new Error("Invalid branch selected");
    }

    try {
      const response = await api.get("/user/staff", {
        params: {
          getAll: 1,
          position: params.position ?? [
            "giaovien",
            "foreignTeacher",
            "starTeacher",
          ],
          branch: branchCode,
          currentBranch: branchCode,
          page: 0,
          maxPage: 1000,
          field: {
            baseSalary: true,
            schedule: true,
            ...params.field,
          },
        },
        headers: {
          "x-company": companyId,
          "x-branch": branchId,
        },
      });
      console.log("API response:", response.data);
      if (response.data && Array.isArray(response.data.data)) {
        return response.data.data.map(this.transformTeacherResponse);
      }

      return [];
    } catch (error: any) {
      console.error("Error fetching teachers:", error);
      throw new Error(
        error.response?.data?.message || "Failed to fetch teachers"
      );
    }
  },
  async getTeacherById(teacherId: string): Promise<Teacher | null> {
    if (!teacherId) {
      throw new Error("Teacher ID is required");
    }
    const branchCode = companyService.getSelectedBranch();
    const companyId = companyService.getSelectedCompany();

    if (!companyId) {
      throw new Error("Please select a company first");
    }

    if (!branchCode) {
      throw new Error("Please select a branch first");
    }

    const cachedBranches: any = companyService.getCachedBranches();
    const branches = cachedBranches?.data?.[companyId];

    if (!Array.isArray(branches)) {
      throw new Error("No branches found for the selected company");
    }

    const branch = branches.find((b: any) => b.code === branchCode);
    const branchId = branch?._id;

    if (!branchId) {
      throw new Error("Invalid branch selected");
    }

    try {
      const response = await api.get(`/user/staff/${teacherId}`, {
        headers: {
          "x-company": companyId,
          "x-branch": branchId, // Sử dụng branchId
        },
      });

      if (response.data) {
        return this.transformTeacherResponse(response.data.data) || null;
      }

      return null;
    } catch (error: any) {
      console.error("Error fetching teacher:", error);
      throw new Error(
        error.response?.data?.message || "Failed to fetch teacher"
      );
    }
  },
};
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  async rewrites() {
    return [
      {
        source: "/api/:path*",
        destination: "https://erp.houston123.edu.vn/api/:path*", // Proxy to the actual API
      },
    ];
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
};

export default nextConfig;
</file>

<file path="src/app/dashboard/classrooms/[id]/page.tsx">
"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import {
  classroomService,
  type Attendance,
  type RecordingSettings,
} from "@/lib/api/classroom";
import { Toaster, toast } from "sonner";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import {
  Calendar,
  Clock,
  FileText,
  MessageSquare,
  ChevronLeft,
  Users,
  Video,
  StopCircle,
  AlertCircle,
} from "lucide-react";
import Link from "next/link";
import DashboardHeader from "@/components/dashboard-header";
import Loader from "@/components/loader";

import { Alert, AlertDescription } from "@/components/ui/alert";

interface DiaryEntry {
  id: string;
  date: string;
  content: string;
  author: string;
  attachments: any[];
}

interface Recording {
  id: string;
  stream: MediaStream;
  recorder: MediaRecorder;
  isRecording: boolean;
  blob?: Blob;
  classCode?: string;
}

export default function ClassroomDetailPage() {
  const params = useParams();
  const classId = typeof params.id === "string" ? params.id : Array.isArray(params.id) ? params.id[0] : "";
  const [attendance, setAttendance] = useState<Attendance[]>([]);
  const [diaryEntries, setDiaryEntries] = useState<DiaryEntry[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [diaryFiles, setDiaryFiles] = useState<File[]>([]);
  const [diaryContent, setDiaryContent] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [commentText, setCommentText] = useState("");
  const [selectedAttendance, setSelectedAttendance] = useState<string>("");
  const [recording, setRecording] = useState<Recording | null>(null);
  const [recordingError, setRecordingError] = useState<string | null>(null);
  const [recordingSettings, setRecordingSettings] = useState<RecordingSettings>();

  const handleSaveRecordingSettings = async (settings: RecordingSettings) => {
    try {
      setIsSubmitting(true);
      // Tạm thời chỉ lưu vào state, trong thực tế bạn sẽ gọi API để lưu
      setRecordingSettings(settings);
      toast.success("Đã lưu cấu hình ghi hình thành công");
    } catch (error) {
      console.error("Error saving recording settings:", error);
      toast.error("Có lỗi xảy ra khi lưu cấu hình ghi hình");
    } finally {
      setIsSubmitting(false);
    }
  };

  const uploadRecording = async () => {
    if (!recording || !recording.blob || !recording.classCode || !selectedAttendance) {
      toast.error("Vui lòng chọn buổi học trước khi lưu video");
      return;
    }

    try {
      const file = new File([recording.blob], `recording-${Date.now()}.webm`, {
        type: "video/webm",
      });

      await classroomService.postComment({
        attendanceId: selectedAttendance,
        content: "Video ghi hình buổi học",
        files: [file],
      });

      // Clear recording after successful upload
      setRecording(null);
      toast.success("Video đã được tải lên thành công");

      // Refresh attendance data to show the new comment with video
      await fetchAttendanceData();
    } catch (error) {
      console.error("Error uploading recording:", error);
      setRecordingError("Không thể tải video lên máy chủ. Vui lòng thử lại.");
    }
  };

  // Auto-select current attendance when starting recording
  const startRecording = async () => {
    // Find the most recent attendance for today
    const today = new Date().toISOString().split('T')[0];
    const todayAttendance = attendance.find(record => 
      record.date.startsWith(today)
    );

    if (!todayAttendance) {
      toast.error("Không tìm thấy buổi học cho ngày hôm nay");
      return;
    }

    // Set the selected attendance
    setSelectedAttendance(todayAttendance._id);

    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true,
      });

      const options = {
        mimeType: "video/webm",
        videoBitsPerSecond: 2500000,
        audioBitsPerSecond: 128000,
      };

      const recorder = new MediaRecorder(stream, options);
      const chunks: BlobPart[] = [];

      recorder.ondataavailable = (e) => {
        if (e.data && e.data.size > 0) {
          chunks.push(e.data);
        }
      };

      recorder.onstop = () => {
        const blob = new Blob(chunks, { type: "video/webm" });
        setRecording((prev) => (prev ? { ...prev, blob } : null));

        // Stop all tracks after recording is stopped
        stream.getTracks().forEach((track) => track.stop());
      };

      // Start recording
      recorder.start(1000);

      setRecording({
        id: Date.now().toString(),
        stream,
        recorder,
        isRecording: true,
        classCode: classId,
      });
    } catch (error) {
      console.error("Error starting recording:", error);
      setRecordingError("Không thể bắt đầu ghi hình. Vui lòng thử lại.");
    }
  };

  const stopRecording = async () => {
    if (!recording) return;

    try {
      if (recording.recorder.state === "recording") {
        recording.recorder.stop();
      }
      setRecording((prev) => (prev ? { ...prev, isRecording: false } : null));
    } catch (error) {
      console.error("Error stopping recording:", error);
      setRecordingError("Không thể dừng ghi hình. Vui lòng thử lại.");
    }
  };

  // Fetch attendance data
  const fetchAttendanceData = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const attendanceData = await classroomService.getClassroomAttendance(
        classId
      );
      setAttendance(attendanceData);
    } catch (err) {
      setError("Failed to load classroom data");
      setAttendance([]);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle branch selection
  const handleBranchSelect = () => {
    // Không gọi lại fetchAttendanceData trừ khi cần thiết
    // Do nothing to prevent refresh loop
  };

  // Load data on mount only once
  useEffect(() => {
    // Lưu trữ biến để kiểm tra nếu component đã unmounted
    let isMounted = true;

    const fetchData = async () => {
      try {
        if (classId && isMounted) {
          setIsLoading(true);
          setError(null);
          const attendanceData = await classroomService.getClassroomAttendance(
            classId
          );
          // Chỉ set state nếu component vẫn mounted
          if (isMounted) {
            setAttendance(attendanceData);
            setIsLoading(false);
          }
        }
      } catch (err) {
        if (isMounted) {
          setError("Failed to load classroom data");
          setAttendance([]);
          setIsLoading(false);
        }
      }
    };

    fetchData();

    // Cleanup function để tránh memory leaks và race conditions
    return () => {
      isMounted = false;
    };
  }, []); // empty dependency array to run only once
  // Format date for display
  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    // Tạo formatter cho phần ngày tháng
    const dateFormatter = new Intl.DateTimeFormat("vi-VN", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    // Lấy chỉ ngày tháng, bỏ phần thời gian 00:00
    return dateFormatter.format(date);
  };
  // Format time range
  const formatTimeRange = (startTime: string, endTime: string): string => {
    const formatTime = (time: string) => {
      const [hours, minutes] = time.split(":");
      if (hours === "00" && minutes === "00") return "";
      return time.slice(0, 5);
    };

    const start = formatTime(startTime);
    const end = formatTime(endTime);

    return start && end ? `${start} - ${end}` : "";
  };

  // Get day of week in Vietnamese
  const getDayOfWeek = (day: number): string => {
    const days = [
      "Chủ nhật",
      "Thứ 2",
      "Thứ 3",
      "Thứ 4",
      "Thứ 5",
      "Thứ 6",
      "Thứ 7",
    ];
    return days[day % 7];
  };

  if (isLoading) {
    return (
      <div className="min-h-[400px] flex items-center justify-center">
        <Loader size="lg" />
      </div>
    );
  }

  if (error || attendance.length === 0) {
    return (
      <div className="rounded-md bg-red-50 p-4 text-sm text-red-500">
        {error || "No attendance data found"}
      </div>
    );
  }

  const currentClassData = attendance[0];

  return (
    <div className="space-y-6 container">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Link
            href="/dashboard/classrooms"
            className="inline-flex items-center text-sm text-blue-600 hover:text-blue-800"
          >
            <ChevronLeft className="h-4 w-4 mr-1" />
            Quay lại
          </Link>
          <h1 className="text-2xl font-semibold">Chi tiết lớp học</h1>
        </div>
        <div className="flex items-center gap-2">
          {recording ? (
            <div className="space-y-4">
              {recording.isRecording ? (
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-2">
                    <span className="inline-block w-2 h-2 bg-red-500 rounded-full animate-pulse"></span>
                    <span className="text-red-500 font-medium">Đang ghi...</span>
                  </div>
                  <Button
                    variant="destructive"
                    onClick={stopRecording}
                    className="gap-2"
                  >
                    <StopCircle className="h-4 w-4" />
                    Dừng ghi hình
                  </Button>
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  {recording.blob && (
                    <Button onClick={uploadRecording} className="gap-2">
                      <FileText className="h-4 w-4" />
                      Lưu video
                    </Button>
                  )}
                </div>
              )}
            </div>
          ) : (
            <Button
              onClick={startRecording}
              className="gap-2"
              disabled={!!recordingError}
            >
              <Video className="h-4 w-4" />
              Bắt đầu ghi hình
            </Button>
          )}
        </div>
      </div>

      {recordingError && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{recordingError}</AlertDescription>
        </Alert>
      )}

      {recording && !recording.isRecording && recording.blob && (
        <Card className="mt-4">
          <CardContent className="pt-6">
            <video
              src={URL.createObjectURL(recording.blob)}
              controls
              className="w-full rounded-lg shadow-lg"
            />
          </CardContent>
        </Card>
      )}

      {error ? (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      ) : null}

      <DashboardHeader
        title={currentClassData.classId}
        description={currentClassData.subjectName}
      />

      {/* Classroom Info Card */}
      <Card>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
            <div className="flex items-center gap-3">
              <div className="rounded-full bg-blue-100 p-3 text-blue-600">
                <Calendar className="h-5 w-5" />
              </div>
              <div>
                <p className="text-sm font-medium">Lịch học</p>
                <p className="text-sm text-gray-500">
                  {currentClassData.schoolShift &&
                  currentClassData.schoolShift.length > 0
                    ? getDayOfWeek(currentClassData.schoolShift[0].day) +
                      ", " +
                      formatTimeRange(
                        currentClassData.schoolShift[0].startTime,
                        currentClassData.schoolShift[0].endTime
                      )
                    : "N/A"}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <div className="rounded-full bg-amber-100 p-3 text-amber-600">
                <Clock className="h-5 w-5" />
              </div>
              <div>
                <p className="text-sm font-medium">Phòng học</p>
                <p className="text-sm text-gray-500">
                  {currentClassData.roomId || "N/A"}
                </p>
              </div>
            </div>            
            <div className="flex items-center gap-3">
              <div className="rounded-full bg-green-100 p-3 text-green-600">
                <Users className="h-5 w-5" />
              </div>
              <div>
                <p className="text-sm font-medium">Giáo viên</p>
                <p className="text-sm text-gray-500">
                  {currentClassData.staffName ? (
                    <Link 
                      href={`/dashboard/teachers/${currentClassData.staffId}`}
                      className="text-blue-600 hover:underline"
                    >
                      {currentClassData.staffName}
                    </Link>
                  ) : (
                    "N/A"
                  )}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <div className="rounded-full bg-purple-100 p-3 text-purple-600">
                <Video className="h-5 w-5" />
              </div>
              <div className="flex items-center gap-3">
                <div>
                  <p className="text-sm font-medium">Ghi hình</p>                  <p className="text-sm text-gray-600">
                    {recording?.isRecording ? "Đang ghi" : recording?.blob ? "Đã ghi xong" : "Chưa ghi hình"}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Tabs for Attendance and Diary */}
      <Tabs defaultValue="attendance" className="space-y-4">
        <TabsList>
          <TabsTrigger value="attendance">Điểm danh</TabsTrigger>
          <TabsTrigger value="diary">Nhật ký lớp học</TabsTrigger>
        </TabsList>

        {/* Attendance Tab */}
        <TabsContent value="attendance" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Bản ghi chấm công</CardTitle>
              <CardDescription>
                Xem và quản lý điểm danh lớp học
              </CardDescription>
            </CardHeader>
            <CardContent>
              {attendance.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  Không có bản ghi điểm danh nào
                </div>
              ) : (
                <div className="rounded-md border">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Ngày</TableHead>
                        <TableHead>Giờ học</TableHead>
                        <TableHead>Phòng học</TableHead>
                        <TableHead>Số học sinh</TableHead>
                        <TableHead>Trạng thái</TableHead>
                        <TableHead>Hành động</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {" "}
                      {attendance.map((record) => (
                        <TableRow key={record._id}>
                          <TableCell>{formatDate(record.date)}</TableCell>
                          <TableCell>
                            {formatTimeRange(record.startTime, record.endTime)}
                          </TableCell>
                          <TableCell>{record.roomId}</TableCell>
                          <TableCell>{record.numberOfStudent}</TableCell>
                          <TableCell>
                            <Badge
                              variant={
                                record.isAttended ? "default" : "secondary"
                              }
                              className={
                                record.isAttended
                                  ? "bg-green-100 text-green-800 hover:bg-green-100"
                                  : ""
                              }
                            >
                              {record.isAttended
                                ? record.attendanceDetail?.confirmed
                                  ? "Đã xác nhận"
                                  : "Đã điểm danh"
                                : "Chưa điểm danh"}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Dialog>
                              <DialogTrigger asChild>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() =>
                                    setSelectedAttendance(record._id)
                                  }
                                >
                                  <MessageSquare className="mr-2 h-4 w-4" />
                                  Thêm ghi chú
                                </Button>
                              </DialogTrigger>
                              <DialogContent className="sm:max-w-[500px]">
                                <DialogHeader>
                                  <DialogTitle>
                                    Thêm ghi chú - {formatDate(record.date)}
                                  </DialogTitle>
                                  <DialogDescription>
                                    Thêm ghi chú hoặc nhận xét về buổi học này
                                  </DialogDescription>
                                </DialogHeader>
                                <div className="space-y-4 pt-4">
                                  <div className="grid gap-4">
                                    <div className="space-y-2">
                                      <Label htmlFor="comment">Ghi chú</Label>
                                      <Input
                                        id="comment"
                                        value={commentText}
                                        onChange={(e) =>
                                          setCommentText(e.target.value)
                                        }
                                        placeholder="Nhập ghi chú của bạn tại đây..."
                                        className="min-h-[100px]"
                                      />
                                    </div>
                                    <div className="space-y-2">
                                      <Label htmlFor="attachments">
                                        Đính kèm
                                      </Label>
                                      <Input
                                        id="attachments"
                                        type="file"
                                        onChange={(e) => {
                                          if (e.target.files) {
                                            setSelectedFiles(
                                              Array.from(e.target.files)
                                            );
                                          }
                                        }}
                                        multiple
                                      />
                                      {selectedFiles.length > 0 && (
                                        <div className="text-sm text-gray-500">
                                          Đã chọn {selectedFiles.length} tệp
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                  <div className="flex justify-end gap-2">
                                    <Button
                                      type="submit"
                                      onClick={async () => {
                                        if (
                                          !commentText.trim() ||
                                          !selectedAttendance
                                        )
                                          return;
                                        try {
                                          setIsSubmitting(true);
                                          await toast.promise(
                                            classroomService.postComment({
                                              attendanceId: selectedAttendance,
                                              content: commentText,
                                              files:
                                                selectedFiles.length > 0
                                                  ? selectedFiles
                                                  : undefined,
                                            }),
                                            {
                                              loading: "Đang thêm ghi chú...",
                                              success: () => {
                                                setCommentText("");
                                                setSelectedFiles([]);
                                                fetchAttendanceData();
                                                return "Đã thêm ghi chú thành công";
                                              },
                                              error:
                                                "Có lỗi xảy ra khi thêm ghi chú",
                                            }
                                          );
                                        } catch (error) {
                                          console.error(
                                            "Error posting comment:",
                                            error
                                          );
                                          toast.error(
                                            "Không thể thêm ghi chú. Vui lòng thử lại sau."
                                          );
                                        } finally {
                                          setIsSubmitting(false);
                                        }
                                      }}
                                      disabled={
                                        isSubmitting || !commentText.trim()
                                      }
                                    >
                                      {isSubmitting
                                        ? "Đang gửi..."
                                        : "Gửi ghi chú"}
                                    </Button>
                                  </div>
                                </div>
                              </DialogContent>
                            </Dialog>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* Diary Tab */}
        <TabsContent value="diary" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Nhật ký lớp học</CardTitle>
              <CardDescription>
                Ghi lại các ghi chú, quan sát và tiến trình cho lớp học này
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* New Diary Entry Form */}
              <Card className="border-dashed">
                <CardContent className="pt-6">
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="diary-content">Mục nhật ký mới</Label>
                      <Input
                        id="diary-content"
                        value={diaryContent}
                        onChange={(e) => setDiaryContent(e.target.value)}
                        placeholder="Hôm nay lớp học như thế nào?"
                        className="h-24"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="diary-attachments">Đính kèm</Label>
                      <Input
                        id="diary-attachments"
                        type="file"
                        onChange={(e) => {
                          if (e.target.files) {
                            setDiaryFiles(Array.from(e.target.files));
                          }
                        }}
                        multiple
                      />
                      {diaryFiles.length > 0 && (
                        <div className="text-sm text-gray-500">
                          Đã chọn {diaryFiles.length} tệp
                        </div>
                      )}
                    </div>
                    <div className="flex justify-end">
                      <Button
                        onClick={async () => {
                          if (!diaryContent.trim()) return;
                          try {
                            setIsSubmitting(true);
                            await toast.promise(
                              classroomService.postDiary({
                                classCode: classId,
                                content: diaryContent,
                                files:
                                  diaryFiles.length > 0
                                    ? diaryFiles
                                    : undefined,
                              }),
                              {
                                loading: "Đang thêm mục nhật ký...",
                                success: () => {
                                  setDiaryContent("");
                                  setDiaryFiles([]);
                                  setDiaryEntries([
                                    {
                                      id: `diary${new Date().getTime()}`,
                                      date: new Date().toISOString(),
                                      content: diaryContent,
                                      author: "Giáo viên",
                                      attachments: [],
                                    },
                                    ...diaryEntries,
                                  ]);
                                  return "Đã thêm mục nhật ký thành công";
                                },
                                error: "Có lỗi xảy ra khi thêm mục nhật ký",
                              }
                            );
                          } catch (error) {
                            console.error("Error posting diary:", error);
                            toast.error(
                              "Không thể thêm mục nhật ký. Vui lòng thử lại sau."
                            );
                          } finally {
                            setIsSubmitting(false);
                          }
                        }}
                        disabled={isSubmitting || !diaryContent.trim()}
                      >
                        {isSubmitting ? "Đang đăng..." : "Đăng mục nhật ký"}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Diary Entries List */}
              <div className="space-y-4">
                {diaryEntries.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    Chưa có mục nhật ký nào
                  </div>
                ) : (
                  diaryEntries.map((entry) => (
                    <Card key={entry.id} className="overflow-hidden">
                      <CardContent className="p-0">
                        <div className="border-b bg-slate-50 px-4 py-3 flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <Avatar className="h-7 w-7">
                              <AvatarFallback className="text-xs">
                                {entry.author
                                  .split(" ")
                                  .map((part) => part[0])
                                  .join("")
                                  .toUpperCase()}
                              </AvatarFallback>
                            </Avatar>
                            <div>
                              <p className="text-sm font-medium">
                                {entry.author}
                              </p>
                              <p className="text-xs text-gray-500">
                                {formatDate(entry.date)}
                              </p>
                            </div>
                          </div>
                        </div>
                        <div className="p-4">
                          <p className="text-sm whitespace-pre-line">
                            {entry.content}
                          </p>
                          {entry.attachments &&
                            entry.attachments.length > 0 && (
                              <div className="mt-3 flex flex-wrap gap-2">
                                {entry.attachments.map((attachment, i) => (
                                  <div
                                    key={i}
                                    className="inline-flex items-center gap-1 rounded bg-gray-100 px-2 py-1 text-xs"
                                  >
                                    <FileText className="h-3 w-3" />
                                    <span>tệp-đính-kèm-{i + 1}</span>
                                  </div>
                                ))}
                              </div>
                            )}
                        </div>
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      <Toaster position="top-right" expand={true} richColors />
    </div>
  );
}
</file>

<file path="src/app/dashboard/classrooms/page.tsx">
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableHeader,
  TableBody,
  TableRow,
  TableHead,
  TableCell,
} from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { classroomService, Classroom } from "@/lib/api/classroom";
import { useStaff } from "@/context/staff-context";
import DashboardHeader from "@/components/dashboard-header";
import Loader from "@/components/loader";
import { Search, Calendar, Clock, ChevronRight, Users } from "lucide-react";

export default function ClassroomsPage() {
  const router = useRouter();
  const { staff } = useStaff();
  const [classrooms, setClassrooms] = useState<Classroom[]>([]);
  const [filteredClassrooms, setFilteredClassrooms] = useState<Classroom[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const searchParams = useSearchParams();
  const filterParam = searchParams.get("filter");
  const [branchSelected, setBranchSelected] = useState(false);
  const [selectedClassroom, setSelectedClassroom] = useState<Classroom | null>(
    null
  );
  const [isTimeDialogOpen, setIsTimeDialogOpen] = useState(false);
  // Load classrooms based on the selected branch and staff role
  const loadClassrooms = async () => {
    try {
      setIsLoading(true);
      setError(null);

      if (!staff) {
        setError("Staff information not available");
        return;
      }

      const data = await classroomService.getClassrooms();
      const filteredData = data.filter(
        (c) =>
          c.teacherCode === staff.userId
      );

      setClassrooms(filteredData);
      setFilteredClassrooms(filteredData);
      if (filteredData.length > 0) {
        applyFilters(filteredData, searchQuery, filterParam || "all");
      }
    } catch (err: any) {
      if (err.message === "Please select a company and branch first") {
        setError("Please select a company and branch first");
      } else {
        setError("Failed to load classrooms. Please try again.");
        console.error("Error loading classrooms:", err);
      }
    } finally {
      setIsLoading(false);
    }
  };
  // Check authentication and branch selection when staff data is available
  useEffect(() => {
    const checkBranchAndLoad = () => {
      const branch = localStorage.getItem("selectedBranch");
      const company = localStorage.getItem("selectedCompany");
      if (branch && company && staff) {
        console.log("Loading classrooms with staff:", staff);
        setBranchSelected(true);
        loadClassrooms();
      }
    };
    checkBranchAndLoad();
  }, [staff]); // Add staff as a dependency

  // Apply filters to the classrooms data
  const applyFilters = (data: Classroom[], query: string, tab: string) => {
    let filtered = [...data];

    // Apply search filter
    if (query) {
      filtered = filtered.filter(
        (classroom) =>
          classroom.classID.toLowerCase().includes(query.toLowerCase()) ||
          classroom.subjectName.toLowerCase().includes(query.toLowerCase())
      );
    }

    // Apply tab filter
    if (tab === "today") {
      const today = new Date().toISOString().split("T")[0];
      // Filter classrooms for today's classes based on schedule data
      filtered = filtered.filter((classroom) => {
        const schedules = classroom.schedule || [];
        const todayDayOfWeek = new Date().getDay(); // 0 = Sunday, 1 = Monday, etc.
        return schedules.some((s) => s.dayOfWeek === todayDayOfWeek);
      });
    } else if (tab === "upcoming") {
      // Filter for upcoming classes (starting within the next 7 days)
      const now = new Date();
      const nextWeek = new Date();
      nextWeek.setDate(now.getDate() + 7);

      filtered = filtered.filter((classroom) => {
        if (!classroom.startDate) return false;
        const start = new Date(classroom.startDate);
        return start >= now && start <= nextWeek;
      });
    } else if (tab === "monday") {
      // Filter classes that have schedules on Monday
      filtered = filtered.filter((classroom) => {
        const schedules = classroom.schedule || [];
        return schedules.some((s) => s.dayOfWeek === 1);
      });
    } else if (tab === "wednesday") {
      // Filter classes that have schedules on Wednesday
      filtered = filtered.filter((classroom) => {
        const schedules = classroom.schedule || [];
        return schedules.some((s) => s.dayOfWeek === 3);
      });
    } else if (tab === "friday") {
      // Filter classes that have schedules on Friday
      filtered = filtered.filter((classroom) => {
        const schedules = classroom.schedule || [];
        return schedules.some((s) => s.dayOfWeek === 5);
      });
    } else if (tab === "weekend") {
      // Filter classes that have schedules on weekends (Saturday or Sunday)
      filtered = filtered.filter((classroom) => {
        const schedules = classroom.schedule || [];
        return schedules.some((s) => s.dayOfWeek === 0 || s.dayOfWeek === 6);
      });
    }

    setFilteredClassrooms(filtered);
  };

  // Handle search input
  const handleSearch = (query: string) => {
    setSearchQuery(query);
    applyFilters(classrooms, query, filterParam || "all");
  };

  // Handle tab change
  const handleTabChange = (value: string) => {
    applyFilters(classrooms, searchQuery, value);
    // Update URL query params without causing a full page reload
    const newUrl = `/dashboard/classrooms${
      value !== "all" ? `?filter=${value}` : ""
    }`;
    window.history.pushState({}, "", newUrl);
  };
  // Navigate to classroom details or show the time schedule dialog
  const handleViewClassroom = (classroomId: string) => {
    const classroom = classrooms.find((c) => c.classID === classroomId);
    if (classroom) {
      setSelectedClassroom(classroom);
      setIsTimeDialogOpen(true);
    } else {
      window.location.href = `/dashboard/classrooms/${classroomId}`;
    }
  };

  // View full details by navigating to the classroom detail page
  const handleViewFullDetails = (classroomId: string) => {
    window.location.href = `/dashboard/classrooms/${classroomId}`;
  };

  // Update the renderContent function
  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="py-8 text-center">
          <Loader size="md" />
        </div>
      );
    }

    if (!branchSelected) {
      return (
        <div className="py-12 text-center">
          <h3 className="text-xl font-semibold mb-2">
            Vui lòng chọn công ty và chi nhánh
          </h3>
          <p className="text-gray-500 mb-4">
            Bạn cần chọn công ty và chi nhánh trước khi xem danh sách lớp học
          </p>
          <div className="bg-yellow-50 p-4 rounded-lg inline-block">
            <p className="text-yellow-600">
              Sử dụng menu thả xuống ở phía trên để chọn
            </p>
          </div>
        </div>
      );
    }

    if (error) {
      return (
        <div className="py-8 text-center">
          <p className="text-red-500">{error}</p>
        </div>
      );
    }

    if (filteredClassrooms.length === 0) {
      return (
        <div className="py-8 text-center">
          <p className="text-gray-500">
            Không tìm thấy lớp học nào với bộ lọc hiện tại.
          </p>
        </div>
      );
    }

    return (
      <Table>
        <TableHeader>
          {" "}
          <TableRow>
            <TableHead>Mã lớp</TableHead>
            <TableHead>Tên môn học</TableHead>
            <TableHead>Giáo viên</TableHead>
            <TableHead>Ngày bắt đầu</TableHead>
            <TableHead>Ngày kết thúc</TableHead>
            <TableHead>Tình trạng</TableHead>
            <TableHead className="text-right">Hành động</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {filteredClassrooms.map((classroom) => (
            <TableRow key={classroom.classID} suppressHydrationWarning>
              {" "}
              <TableCell className="font-medium">
                {classroom.classID}
              </TableCell>{" "}
              <TableCell>{classroom.subjectName}</TableCell>
              <TableCell>{classroom.teacherName}</TableCell>
              <TableCell>
                {classroom.startDate ? (
                  <div className="flex items-center">
                    <Calendar className="mr-1 h-4 w-4 text-blue-500" />
                    {new Date(classroom.startDate).toLocaleDateString("vi-VN")}
                  </div>
                ) : (
                  <span className="text-gray-400">Chưa cập nhật</span>
                )}
              </TableCell>
              <TableCell>
                {classroom.finishDate ? (
                  <div className="flex items-center">
                    <Calendar className="mr-1 h-4 w-4 text-red-500" />
                    {new Date(classroom.finishDate).toLocaleDateString("vi-VN")}
                  </div>
                ) : (
                  <span className="text-gray-400">Chưa cập nhật</span>
                )}
              </TableCell>
              <TableCell>
                <Badge variant={classroom.isActive ? "default" : "secondary"}>
                  {classroom.isActive ? "Đang hoạt động" : "Không hoạt động"}
                </Badge>
              </TableCell>{" "}
              <TableCell className="text-right">
                <Button
                  variant="outline"
                  size="sm"
                  className="mr-2"
                  onClick={() => handleViewClassroom(classroom.classID)}
                >
                  <Clock className="h-4 w-4 mr-1" />
                  Lịch học
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleViewFullDetails(classroom.classID)}
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    );
  };

  return (
    <div className="space-y-6">
      <DashboardHeader
        title="Classrooms"
        description="Xem và quản lý tất cả lớp học của bạn"
      />
      {/* Tabs and Search */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <CardTitle>Danh sách lớp học</CardTitle>
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
              <Input
                type="search"
                placeholder="Tìm kiếm lớp học..."
                className="pl-8 w-full sm:w-[260px]"
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
              />
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {!branchSelected ? (
            renderContent()
          ) : (
            <Tabs
              defaultValue="all"
              value={filterParam || "all"}
              onValueChange={handleTabChange}
            >
              {" "}
              <TabsList className="mb-4">
                <TabsTrigger value="all">Tất cả lớp</TabsTrigger>
                <TabsTrigger value="today">Lớp học hôm nay</TabsTrigger>
                <TabsTrigger value="upcoming">Sắp tới</TabsTrigger>
                <TabsTrigger value="monday">Thứ 2</TabsTrigger>
                <TabsTrigger value="wednesday">Thứ 4</TabsTrigger>
                <TabsTrigger value="friday">Thứ 6</TabsTrigger>
                <TabsTrigger value="weekend">Cuối tuần</TabsTrigger>
              </TabsList>{" "}
              <TabsContent value="all" className="space-y-4">
                {renderContent()}
              </TabsContent>
              <TabsContent value="today" className="space-y-4">
                {renderContent()}
              </TabsContent>
              <TabsContent value="upcoming" className="space-y-4">
                {renderContent()}
              </TabsContent>
              <TabsContent value="monday" className="space-y-4">
                {renderContent()}
              </TabsContent>
              <TabsContent value="wednesday" className="space-y-4">
                {renderContent()}
              </TabsContent>
              <TabsContent value="friday" className="space-y-4">
                {renderContent()}
              </TabsContent>
              <TabsContent value="weekend" className="space-y-4">
                {renderContent()}
              </TabsContent>
            </Tabs>
          )}{" "}
        </CardContent>
      </Card>

      {/* Dialog for classroom schedule */}
      <Dialog open={isTimeDialogOpen} onOpenChange={setIsTimeDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Calendar className="mr-2 h-5 w-5 text-blue-500" />
              Lịch học lớp {selectedClassroom?.classID}
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            {/* Basic class info */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="text-sm font-medium text-gray-500">
                  Tên môn học
                </h3>
                <p className="text-base">{selectedClassroom?.subjectName}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">Giáo viên</h3>
                <p className="text-base">{selectedClassroom?.teacherName}</p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">
                  Ngày bắt đầu
                </h3>
                <p className="text-base flex items-center">
                  <Calendar className="mr-1 h-4 w-4 text-blue-500" />
                  {selectedClassroom?.startDate
                    ? new Date(selectedClassroom.startDate).toLocaleDateString(
                        "vi-VN"
                      )
                    : "Chưa cập nhật"}
                </p>
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-500">
                  Ngày kết thúc
                </h3>
                <p className="text-base flex items-center">
                  <Calendar className="mr-1 h-4 w-4 text-red-500" />
                  {selectedClassroom?.finishDate
                    ? new Date(selectedClassroom.finishDate).toLocaleDateString(
                        "vi-VN"
                      )
                    : "Chưa cập nhật"}
                </p>
              </div>
            </div>{" "}
            {/* Study time table */}
            <div>
              <h3 className="text-sm font-medium text-gray-500 mb-2 flex items-center justify-between">
                <span className="flex items-center">
                  <Clock className="mr-1 h-4 w-4" />
                  Lịch học trong tuần
                </span>
                <Button
                  variant="link"
                  size="sm"
                  className="p-0 h-auto"
                  onClick={() => {
                    setIsTimeDialogOpen(false);
                    router.push("/dashboard/class-schedule");
                  }}
                >
                  Xem tất cả lịch học
                </Button>
              </h3>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Ngày</TableHead>
                    <TableHead>Bắt đầu</TableHead>
                    <TableHead>Kết thúc</TableHead>
                    <TableHead>Phòng</TableHead>
                  </TableRow>
                </TableHeader>
              </Table>
            </div>
            {/* Student attendance */}
            <div>
              <h3 className="text-sm font-medium text-gray-500 mb-2 flex items-center">
                <Users className="mr-1 h-4 w-4" />
                Sĩ số: {selectedClassroom?.member?.length || 0} học viên
              </h3>
            </div>
            <div className="flex justify-end">
              <Button
                onClick={() =>
                  handleViewFullDetails(selectedClassroom?.classID || "")
                }
                className="mr-2"
              >
                Xem chi tiết lớp học
              </Button>
              <Button
                variant="outline"
                onClick={() => setIsTimeDialogOpen(false)}
              >
                Đóng
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="src/app/dashboard/page.tsx">
"use client";

import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { classroomService, Classroom } from "@/lib/api/classroom";
import ClassScheduleCalendar from "@/components/classroom-schedule-calendar";
import DashboardHeader from "@/components/dashboard-header";
import Loader from "@/components/loader";
import { Search, Calendar, Clock, Users, BookOpen } from "lucide-react";

// Define a calendar view type
type CalendarView = "day" | "week" | "month" | "list";

export default function SchedulePage() {
  const [classrooms, setClassrooms] = useState<Classroom[]>([]);
  const [filteredClassrooms, setFilteredClassrooms] = useState<Classroom[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [calendarView, setCalendarView] = useState<CalendarView>("month"); // Default to month view
  const [calendarDate, setCalendarDate] = useState<Date>(new Date());

  // Load user preferences
  useEffect(() => {
    try {
      // Load saved view preference
      const savedView = localStorage.getItem("calendarView");
      if (savedView && ["day", "week", "month", "list"].includes(savedView)) {
        setCalendarView(savedView as CalendarView);
      }

      // Load saved date preference
      const savedDate = localStorage.getItem("calendarDate");
      if (savedDate) {
        const parsedDate = new Date(savedDate);
        if (!isNaN(parsedDate.getTime())) {
          setCalendarDate(parsedDate);
        }
      }
    } catch (error) {
      console.error("Error loading calendar preferences:", error);
    }
  }, []);

  // Save user preferences when they change
  useEffect(() => {
    try {
      localStorage.setItem("calendarView", calendarView);
      localStorage.setItem("calendarDate", calendarDate.toISOString());
    } catch (error) {
      console.error("Error saving calendar preferences:", error);
    }
  }, [calendarView, calendarDate]);

  // Load classrooms
  const loadClassrooms = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const data = await classroomService.getClassrooms();

      // Filter out classrooms with no schedule data to avoid empty entries
      const filteredData = data.filter(
        (classroom) => classroom.schedule && classroom.schedule.length > 0
      );

      setClassrooms(filteredData);
      setFilteredClassrooms(filteredData);

      if (searchQuery) {
        handleSearch(searchQuery);
      }
    } catch (err: any) {
      setError("Failed to load classrooms. Please try again.");
      console.error("Error loading classrooms:", err);
    } finally {
      setIsLoading(false);
    }
  };

  // Load classrooms on mount
  useEffect(() => {
    loadClassrooms();
  }, []);

  // Handle search input
  const handleSearch = (query: string) => {
    setSearchQuery(query);
    if (query) {
      const filtered = classrooms.filter(
        (classroom) =>
          classroom.classID.toLowerCase().includes(query.toLowerCase()) ||
          classroom.subjectName.toLowerCase().includes(query.toLowerCase()) ||
          (classroom.teacherName &&
            classroom.teacherName.toLowerCase().includes(query.toLowerCase()))
      );
      setFilteredClassrooms(filtered);
    } else {
      setFilteredClassrooms(classrooms);
    }
  };

  // Handle view change
  const handleViewChange = (view: CalendarView) => {
    setCalendarView(view);
  };

  // Handle date change
  const handleDateChange = (date: Date) => {
    setCalendarDate(date);
  };

  // Render content based on loading and error states
  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="py-8 text-center">
          <Loader size="md" />
        </div>
      );
    }

    if (error) {
      return (
        <div className="py-8 text-center">
          <p className="text-red-500">{error}</p>
        </div>
      );
    }

    if (filteredClassrooms.length === 0) {
      return (
        <div className="py-8 text-center">
          <Calendar className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
          <p className="text-muted-foreground">
            {searchQuery
              ? "Không tìm thấy lớp học nào phù hợp với từ khóa tìm kiếm."
              : "Không có lịch học nào. Vui lòng thêm lịch cho các lớp học."}
          </p>
        </div>
      );
    }

    return (
      <ClassScheduleCalendar
        classrooms={filteredClassrooms}
        initialView={calendarView}
        initialDate={calendarDate}
        onViewChange={handleViewChange}
        onDateChange={handleDateChange}
      />
    );
  };

  const getActiveClassCount = () => {
    return filteredClassrooms.filter((c) => c.isActive).length;
  };

  const getTodayClassCount = () => {
    const today = new Date().getDay(); // 0 = Sunday, 1 = Monday, etc.
    return filteredClassrooms.filter((classroom) => {
      if (!classroom.schedule) return false;
      return classroom.schedule.some((s) => s.dayOfWeek === today);
    }).length;
  };

  const getTotalStudentsCount = () => {
    return filteredClassrooms.reduce(
      (sum, classroom) => sum + (classroom.studentNumber || 0),
      0
    );
  };

  const getTeachersCount = () => {
    // Get unique teachers
    const teachers = new Set();
    filteredClassrooms.forEach((classroom) => {
      if (classroom.teacherName) teachers.add(classroom.teacherName);
    });
    return teachers.size;
  };

  return (
    <div className="space-y-6">
      {" "}
      <DashboardHeader
        title="Lịch giảng dạy"
        description="Xem lịch giảng dạy của các lớp học"
      />
      {/* Search bar */}
      {!isLoading && !error && (
        <Card className="mb-4">
          <CardContent className="p-4">
            <div className="relative w-full max-w-md mx-auto">
              <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Tìm kiếm lớp học, giáo viên, phòng học..."
                className="pl-10 w-full"
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
              />
              {searchQuery && (
                <Button
                  variant="ghost"
                  size="sm"
                  className="absolute right-1 top-1.5 h-7 px-2"
                  onClick={() => handleSearch("")}
                >
                  Xóa
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      )}
      <div className="space-y-4">{renderContent()}</div>
    </div>
  );
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/context/auth-context";
import { StaffProvider } from "@/context/staff-context";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Houston123 Classroom Management",
  description: "Classroom management system for Houston123 Education",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider>
          <StaffProvider>{children}</StaffProvider>
        </AuthProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/context/auth-context";

export default function Home() {
  const { isAuthenticated, isLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading) {
      if (isAuthenticated) {
        router.push("/dashboard");
      } else {
        router.push("/login");
      }
    }
  }, [isAuthenticated, isLoading, router]);

  // Show nothing while redirecting
  if (isLoading || isAuthenticated) {
    return null;
  }
}
</file>

<file path="src/lib/api/classroom.ts">
import api from "./axios";
import { companyService } from "./company";

export interface RecordingSettings {
  resolution: string; // e.g. "1920x1080", "1280x720"
  bitrate: number; // in kbps
  fps: number;
  codec: string; // e.g. "h264", "vp8"
  audioQuality: {
    bitrate: number; // in kbps
    sampleRate: number; // e.g. 44100, 48000
    channels: number; // 1 for mono, 2 for stereo
  };
}

export interface PostRecording {
  classCode: string;
  file: File;
  timestamp: string;
}

export interface Classroom {
  _id: string;
  classID: string;
  teacherCode: string;
  subjectCode: string;
  grade: string;
  branch: string;
  startDate: string;
  finishDate: string;
  supporter: string[];
  publicMember: string[];
  partnerSchoolId: string | null;
  schoolShift: any[];
  member: any[];
  __v: number;
  moodleCourseId: number | null;
  detail?: {
    lastSync?: string;
    className?: string;
    teacherName?: string;
  };
  program?: {
    [key: string]: string;
  };
  status: number;
  conversationMonthlyUpdated: any[];
  diaryMonthlyUpdated: any[];
  ID: number;
  subjectName: string;
  teacherName: string;
  role: string;
  beginDate: string;
  reason: string | null;
  endClassStaffCode: string | null;
  studentNumber: number | null;
  schedule: Array<{
    classRoomCode?: string;
    dayOfWeek?: number;
    beginTime?: string;
    finishTime?: string;
  }>;
  isActive: boolean;
  salary?: {
    __v: number;
  };
  recordingSettings?: RecordingSettings; // Add recording settings
}

export interface Attendance {
  _id: string;
  classId: string;
  date: string;
  roomId: string;
  startTime: string;
  endTime: string;
  numberOfStudent: number;
  staffId: string;
  staffName: string;
  subjectCode: string;
  subjectName: string;
  grade: string;
  branch: string;
  startDate: string;
  finishDate: string;
  schoolShift: Array<{
    _id: string;
    roomId: string;
    day: number;
    startTime: string;
    endTime: string;
    date: string;
    expiryDate: string;
  }>;
  partnerSchoolId: string | null;
  isAttended: boolean;
  attendanceDetail: {
    confirmed: boolean;
  };
}

export interface PostComment {
  attendanceId: string;
  content: string;
  files?: File[];
}

export interface PostDiary {
  classCode: string;
  content: string;
  files?: File[];
}

export const classroomService = {
  async getClassrooms(): Promise<Classroom[]> {
    const branchCode = companyService.getSelectedBranch();
    const companyId = companyService.getSelectedCompany();

    if (!branchCode || !companyId) {
      throw new Error("Please select a company and branch first");
    }

    try {
      const response = await api.get("/classroom", {
        params: {
          field: JSON.stringify({ partnerSchoolName: true, salary: true }),
          branch: branchCode,
          // isActive: true,
        },
        headers: {
          "x-company": companyId,
        },
      });

      if (response.data) {
        const classrooms =
          response.data.data || response.data.classrooms || response.data;
        if (Array.isArray(classrooms)) {
          return classrooms;
        }
        console.warn("Unexpected response format:", response.data);
      }
      return [];
    } catch (error: any) {
      console.error("Error fetching classrooms:", {
        error: error.message,
        response: error.response?.data,
        status: error.response?.status,
      });
      throw error; // Re-throw to let the component handle the error
    }
  },

  async getClassroomAttendance(classCode: string): Promise<Attendance[]> {
    if (!classCode) {
      return [];
    }

    try {
      const response = await api.get(`/classroom/${classCode}/attendance`);
      return response.data.data || [];
    } catch (error: any) {
      console.error("Error fetching classroom attendance:", {
        error: error.message,
        response: error.response?.data,
        status: error.response?.status,
      });
      return [];
    }
  },

  async postComment({
    attendanceId,
    content,
    files,
  }: PostComment): Promise<any> {
    const formData = new FormData();
    formData.append("content", content);

    if (files && files.length > 0) {
      files.forEach((file, index) => {
        formData.append(`file${index + 1}`, file);
      });
    }

    const response = await api.post(
      `/classroom/attendance/${attendanceId}/comment`,
      formData,
      {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      }
    );

    return response.data;
  },

  async postDiary({ classCode, content, files }: PostDiary): Promise<any> {
    const formData = new FormData();
    formData.append("content", content);

    if (files && files.length > 0) {
      files.forEach((file, index) => {
        formData.append(`file${index + 1}`, file);
      });
    }

    const response = await api.post(
      `/classroom/${classCode}/diary/post`,
      formData,
      {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      }
    );

    return response.data;
  },

  async postRecording({
    classCode,
    file,
    timestamp,
  }: PostRecording): Promise<any> {
    const formData = new FormData();
    formData.append("file", file);
    formData.append("timestamp", timestamp);

    const response = await api.post(
      `/classroom/${classCode}/recording`,
      formData,
      {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      }
    );

    return response.data;
  },
};
</file>

<file path="src/app/dashboard/layout.tsx">
"use client";

import { useState, useEffect } from "react";
import { useRouter, usePathname } from "next/navigation";
import { useAuth } from "@/context/auth-context";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import Image from "next/image";
import UserMenu from "@/components/user-menu";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  ChevronDown,
  Menu,
  X,
  Home,
  BookOpen,
  List,
  Users,
  Calendar,
  Settings,
  Bell,
  ChevronRight,
  Building2,
  MapPin,
  Video, // Thêm biểu tượng Video
} from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { companyService, Company, Branch } from "@/lib/api/company";

interface DashboardLayoutProps {
  children: React.ReactNode;
}

// Define navigation items with support for nested items and icons
interface NavItem {
  name: string;
  path?: string;
  icon?: React.ReactNode;
  children?: NavItem[];
  badge?: string;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const { isAuthenticated, logout, isLoading } = useAuth();
  const router = useRouter();
  const pathname = usePathname();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isSidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [breadcrumbs, setBreadcrumbs] = useState<
    { name: string; path: string }[]
  >([]);

  // Company and branch state
  const [companies, setCompanies] = useState<Company[]>([]);
  const [branches, setBranches] = useState<Branch[]>([]);
  const [selectedCompany, setSelectedCompany] = useState<string | null>(
    companyService.getSelectedCompany()
  );
  const [selectedBranch, setSelectedBranch] = useState<string | null>(
    companyService.getSelectedBranch()
  );
  const [isCompanyLoading, setIsCompanyLoading] = useState(true);
  const [needsReload, setNeedsReload] = useState(false);

  // Fetch companies on mount
  useEffect(() => {
    const fetchCompanies = async () => {
      try {
        setIsCompanyLoading(true);
        const data = await companyService.getCompanies();
        setCompanies(data);

        // If there's a selectedCompany, load its branches
        if (selectedCompany) {
          loadBranches(selectedCompany);
        } else if (data.length > 0) {
          // Auto-select the first company if none is selected
          handleCompanySelect(data[0]._id);
        }
      } catch (err) {
        console.error("Failed to load companies", err);
      } finally {
        setIsCompanyLoading(false);
      }
    };

    if (isAuthenticated) {
      fetchCompanies();
    }
  }, [isAuthenticated]);

  // Load branches for a selected company
  const loadBranches = async (companyId: string) => {
    try {
      const data = await companyService.getBranches(companyId);
      setBranches(data);

      // If there's a stored selected branch and it belongs to this company, keep it selected
      const storedBranch = companyService.getSelectedBranch();
      const branchExists = data.some((branch) => branch.code === storedBranch);

      if (storedBranch && branchExists) {
        setSelectedBranch(storedBranch);
      } else if (data.length > 0) {
        // Auto-select the first branch if none is selected or current one doesn't belong to this company
        handleBranchSelect(data[0].code);
      } else {
        setSelectedBranch(null);
      }
    } catch (err) {
      console.error("Failed to load branches", err);
    }
  };

  // Handle company selection
  const handleCompanySelect = (companyId: string) => {
    if (companyId === selectedCompany) return;

    setSelectedCompany(companyId);
    companyService.setSelectedCompany(companyId);
    loadBranches(companyId);
    setNeedsReload(true);
  };

  // Handle branch selection
  const handleBranchSelect = (branchCode: string) => {
    if (branchCode === selectedBranch) return;

    setSelectedBranch(branchCode);
    companyService.setSelectedBranch(branchCode);
    setNeedsReload(true);
  };

  // Trigger page reload when branch or company changes
  useEffect(() => {
    if (needsReload) {
      // Reset the flag
      setNeedsReload(false);

      // For a SPA experience, we can use router.refresh()
      router.refresh();

      // If we need a stronger reset, use window.location.reload()
      if (typeof window !== 'undefined') {
        window.location.reload();
      }
    }
  }, [needsReload, router]);

  // Generate breadcrumbs based on current path
  useEffect(() => {
    const pathSegments = pathname.split("/").filter(Boolean);
    const breadcrumbItems = [];

    let currentPath = "";
    for (let i = 0; i < pathSegments.length; i++) {
      currentPath += `/${pathSegments[i]}`;

      // Find the name from navItems or use capitalized segment
      let name =
        pathSegments[i].charAt(0).toUpperCase() + pathSegments[i].slice(1);

      // For dashboard, use Dashboard instead of the segment
      if (pathSegments[i] === "dashboard" && i === 0) {
        name = "Dashboard";
      }

      breadcrumbItems.push({
        name,
        path: currentPath,
      });
    }

    setBreadcrumbs(breadcrumbItems);
  }, [pathname]);

  // Check authentication
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      router.push("/login");
    }
  }, [isAuthenticated, isLoading, router]);

  // Handle logout
  const handleLogout = () => {
    logout();
  };

  // If still loading or not authenticated, show loading screen
  if (isLoading || !isAuthenticated) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin h-10 w-10 border-4 border-blue-600 rounded-full border-t-transparent mx-auto mb-4"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  // Navigation items with icons and dropdown structure
  const navItems: NavItem[] = [
    {
      name: "Tổng quan",
      path: "/dashboard",
      icon: <Home className="h-5 w-5" />,
    },
    {
      name: "Lớp học",
      icon: <BookOpen className="h-5 w-5" />,
      children: [
        {
          name: "Danh sách lớp",
          path: "/dashboard/classrooms",
          icon: <List className="h-4 w-4" />,
        },
        {
          name: "Ghi hình",
          path: "/dashboard/recordings",
          icon: <Video className="h-4 w-4" />,
        },
      ],
      badge: "New",
    },
  ];

  // Helper function to render sidebar nav items
  const renderNavItem = (item: NavItem) => {
    // Check if this item or any of its children is active
    const isItemActive = pathname === item.path;
    const isChildActive = item.children?.some(
      (child) => pathname === child.path
    );
    const isActive = isItemActive || isChildActive;

    // If item has children, render as collapsible section
    if (item.children) {
      return (
        <div key={item.name} className="mb-1">
          <DropdownMenu>
            <DropdownMenuTrigger
              className={`w-full flex items-center justify-between px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                isActive
                  ? "bg-blue-50 text-blue-700"
                  : "text-gray-700 hover:bg-gray-100 hover:text-blue-600"
              }`}
            >
              <div className="flex items-center space-x-3">
                <div
                  className={`${isActive ? "text-blue-600" : "text-gray-500"}`}
                >
                  {item.icon}
                </div>
                {!isSidebarCollapsed && <span>{item.name}</span>}
                {!isSidebarCollapsed && item.badge && (
                  <Badge className="ml-2 px-1.5 py-0.5 bg-blue-100 text-blue-800 text-xs">
                    {item.badge}
                  </Badge>
                )}
              </div>
              {!isSidebarCollapsed && <ChevronDown className="h-4 w-4" />}
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start" side="right" className="w-52">
              {item.children.map((child) => (
                <DropdownMenuItem key={child.path} asChild>
                  <Link
                    href={child.path || "#"}
                    className={`w-full flex items-center space-x-2 ${
                      pathname === child.path
                        ? "text-blue-700"
                        : "text-gray-700 hover:text-blue-600"
                    }`}
                  >
                    {child.icon}
                    <span>{child.name}</span>
                  </Link>
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      );
    }

    // Otherwise render as regular link
    return (
      <Link
        key={item.path}
        href={item.path || "#"}
        className={`flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium mb-1 transition-colors ${
          pathname === item.path
            ? "bg-blue-50 text-blue-700"
            : "text-gray-700 hover:bg-gray-100 hover:text-blue-600"
        }`}
      >
        <div
          className={`${
            pathname === item.path ? "text-blue-600" : "text-gray-500"
          }`}
        >
          {item.icon}
        </div>
        {!isSidebarCollapsed && <span>{item.name}</span>}
        {!isSidebarCollapsed && item.badge && (
          <Badge className="ml-auto px-1.5 py-0.5 bg-blue-100 text-blue-800 text-xs">
            {item.badge}
          </Badge>
        )}
      </Link>
    );
  };

  // Helper function to render mobile nav items
  const renderMobileNavItem = (item: NavItem) => {
    // If item has children, render with nested items
    if (item.children) {
      return (
        <div key={item.name} className="space-y-1">
          <div className="px-3 py-2 text-sm font-medium text-gray-800 flex items-center space-x-2">
            {item.icon}
            <span>{item.name}</span>
            {item.badge && (
              <Badge className="ml-2 px-1.5 py-0.5 bg-blue-100 text-blue-800 text-xs">
                {item.badge}
              </Badge>
            )}
          </div>
          <div className="pl-8 space-y-1 border-l-2 border-gray-200">
            {item.children.map((child) => (
              <Link
                key={child.path}
                href={child.path || "#"}
                className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium ${
                  pathname === child.path
                    ? "bg-blue-50 text-blue-700"
                    : "text-gray-600 hover:bg-gray-50 hover:text-blue-600"
                }`}
                onClick={() => setIsMobileMenuOpen(false)}
              >
                {child.icon}
                <span>{child.name}</span>
              </Link>
            ))}
          </div>
        </div>
      );
    }

    // Otherwise render as regular link
    return (
      <Link
        key={item.path}
        href={item.path || "#"}
        className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium ${
          pathname === item.path
            ? "bg-blue-50 text-blue-700"
            : "text-gray-600 hover:bg-gray-50 hover:text-blue-600"
        }`}
        onClick={() => setIsMobileMenuOpen(false)}
      >
        {item.icon}
        <span>{item.name}</span>
        {item.badge && (
          <Badge className="ml-auto px-1.5 py-0.5 bg-blue-100 text-blue-800 text-xs">
            {item.badge}
          </Badge>
        )}
      </Link>
    );
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      {/* Header */}
      <header className="sticky top-0 z-30 bg-white border-b shadow-sm">
        <div className="px-4 h-16 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            {/* Mobile menu button */}
            <button
              className="md:hidden text-gray-500 hover:text-gray-700 focus:outline-none"
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            >
              {isMobileMenuOpen ? (
                <X className="h-6 w-6" />
              ) : (
                <Menu className="h-6 w-6" />
              )}
            </button>

            {/* Desktop sidebar toggle */}
            <button
              className="hidden md:flex text-gray-500 hover:text-gray-700 focus:outline-none"
              onClick={() => setSidebarCollapsed(!isSidebarCollapsed)}
            >
              <Menu className="h-6 w-6" />
            </button>

            {/* Logo */}
            <Link href="/dashboard" className="flex items-center">
              <Image
                src="/houston123-logo.png"
                alt="Houston123 Logo"
                width={140}
                height={40}
                className="h-8 w-auto"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.onerror = null;
                  target.src = "/next.svg";
                }}
              />
            </Link>
          </div>

          <div className="flex items-center space-x-4">
            {/* Notifications */}
            <button className="relative p-1 text-gray-500 hover:text-blue-600 focus:outline-none">
              <Bell className="h-5 w-5" />
              <span className="absolute top-0 right-0 h-2 w-2 rounded-full bg-red-500"></span>
            </button>

            {/* User menu */}
            <UserMenu />
          </div>
        </div>
      </header>

      <div className="flex-1 flex">
        {/* Sidebar - Desktop */}
        <aside
          className={`hidden md:block bg-white border-r shadow-sm transition-all ${
            isSidebarCollapsed ? "w-16" : "w-64"
          }`}
        >
          <ScrollArea className="h-[calc(100vh-4rem)]">
            <div className="p-3">
              <nav className="flex flex-col space-y-1">
                {navItems.map(renderNavItem)}
              </nav>

              {/* Company and Branch Selection */}
              {!isSidebarCollapsed ? (
                <div className="mt-6 border-t pt-4">
                  <h3 className="text-xs uppercase font-semibold text-gray-500 mb-3 px-3">
                    Vị trí hiện tại
                  </h3>

                  <div className="space-y-3 px-1">
                    {/* Company Select */}
                    <div className="space-y-1">
                      <div className="flex items-center space-x-2 px-2 text-xs text-gray-600">
                        <Building2 className="h-3.5 w-3.5" />
                        <span>Công ty</span>
                      </div>
                      <Select
                        disabled={isCompanyLoading || companies.length === 0}
                        value={selectedCompany || ""}
                        onValueChange={handleCompanySelect}
                      >
                        <SelectTrigger className="w-full text-xs h-8">
                          <SelectValue placeholder="Chọn công ty" />
                        </SelectTrigger>
                        <SelectContent>
                          {companies.map((company) => (
                            <SelectItem key={company._id} value={company._id}>
                              {company.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    {/* Branch Select */}
                    <div className="space-y-1">
                      <div className="flex items-center space-x-2 px-2 text-xs text-gray-600">
                        <MapPin className="h-3.5 w-3.5" />
                        <span>Chi nhánh</span>
                      </div>
                      <Select
                        disabled={
                          isCompanyLoading ||
                          !selectedCompany ||
                          branches.length === 0
                        }
                        value={selectedBranch || ""}
                        onValueChange={handleBranchSelect}
                      >
                        <SelectTrigger className="w-full text-xs h-8">
                          <SelectValue placeholder="Chọn chi nhánh" />
                        </SelectTrigger>
                        <SelectContent>
                          {branches.map((branch) => (
                            <SelectItem key={branch._id} value={branch.code}>
                              {branch.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="mt-6 border-t pt-4 px-3">
                  <div className="flex justify-center">
                    <Building2 className="h-5 w-5 text-gray-500" />
                  </div>
                  <div className="flex justify-center mt-4">
                    <MapPin className="h-5 w-5 text-gray-500" />
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>
        </aside>

        {/* Mobile sidebar overlay */}
        {isMobileMenuOpen && (
          <div
            className="md:hidden fixed inset-0 z-20 bg-black bg-opacity-50"
            onClick={() => setIsMobileMenuOpen(false)}
          />
        )}

        {/* Mobile sidebar */}
        <aside
          className={`md:hidden fixed inset-y-0 left-0 z-30 w-64 bg-white shadow-lg transform transition-transform duration-200 ease-in-out ${
            isMobileMenuOpen ? "translate-x-0" : "-translate-x-full"
          }`}
        >
          <div className="flex items-center justify-between h-16 px-4 border-b">
            <Image
              src="/houston123-logo.png"
              alt="Houston123 Logo"
              width={120}
              height={35}
              className="h-7 w-auto"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.onerror = null;
                target.src = "/next.svg";
              }}
            />
            <button onClick={() => setIsMobileMenuOpen(false)}>
              <X className="h-5 w-5 text-gray-500" />
            </button>
          </div>
          <ScrollArea className="h-[calc(100vh-4rem)]">
            <div className="p-3">
              <nav className="flex flex-col space-y-1">
                {navItems.map(renderMobileNavItem)}
              </nav>

              {/* Company and Branch Selection for Mobile */}
              <div className="mt-6 border-t pt-4">
                <h3 className="text-xs uppercase font-semibold text-gray-500 mb-3 px-3">
                  Vị trí hiện tại
                </h3>

                <div className="space-y-3 px-1">
                  {/* Company Select */}
                  <div className="space-y-1">
                    <div className="flex items-center space-x-2 px-2 text-xs text-gray-600">
                      <Building2 className="h-3.5 w-3.5" />
                      <span>Công ty</span>
                    </div>
                    <Select
                      disabled={isCompanyLoading || companies.length === 0}
                      value={selectedCompany || ""}
                      onValueChange={handleCompanySelect}
                    >
                      <SelectTrigger className="w-full text-xs h-8">
                        <SelectValue placeholder="Chọn công ty" />
                      </SelectTrigger>
                      <SelectContent>
                        {companies.map((company) => (
                          <SelectItem key={company._id} value={company._id}>
                            {company.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Branch Select */}
                  <div className="space-y-1">
                    <div className="flex items-center space-x-2 px-2 text-xs text-gray-600">
                      <MapPin className="h-3.5 w-3.5" />
                      <span>Chi nhánh</span>
                    </div>
                    <Select
                      disabled={
                        isCompanyLoading ||
                        !selectedCompany ||
                        branches.length === 0
                      }
                      value={selectedBranch || ""}
                      onValueChange={handleBranchSelect}
                    >
                      <SelectTrigger className="w-full text-xs h-8">
                        <SelectValue placeholder="Chọn chi nhánh" />
                      </SelectTrigger>
                      <SelectContent>
                        {branches.map((branch) => (
                          <SelectItem key={branch._id} value={branch.code}>
                            {branch.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              <hr className="my-4 border-gray-200" />
              <Button
                variant="destructive"
                size="sm"
                onClick={handleLogout}
                className="w-full justify-center mt-2"
              >
                Đăng xuất
              </Button>
            </div>
          </ScrollArea>
        </aside>

        {/* Main content */}
        <main className="flex-1 overflow-auto">
          {/* Breadcrumbs */}
          <div className="bg-white p-4 border-b">
            <div className="container mx-auto">
              <div className="flex items-center text-sm text-gray-500">
                {breadcrumbs.map((item, index) => (
                  <div key={item.path} className="flex items-center">
                    {index > 0 && (
                      <ChevronRight className="h-4 w-4 mx-2 text-gray-400" />
                    )}
                    {index === breadcrumbs.length - 1 ? (
                      <span className="font-medium text-blue-600">
                        {item.name}
                      </span>
                    ) : (
                      <Link href={item.path} className="hover:text-blue-600">
                        {item.name}
                      </Link>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Page content */}
          <div className="container mx-auto px-4 py-6">{children}</div>
        </main>
      </div>

      {/* Footer */}
      <footer className="border-t bg-white py-4">
        <div className="container mx-auto px-4 text-center text-sm text-gray-500">
          &copy; {new Date().getFullYear()} Houston123 Education. All rights
          reserved.
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="package.json">
{
  "name": "houston123-classrooms-management",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.0.1",
    "@radix-ui/react-avatar": "^1.1.9",
    "@radix-ui/react-dialog": "^1.1.13",
    "@radix-ui/react-dropdown-menu": "^2.1.14",
    "@radix-ui/react-label": "^2.1.6",
    "@radix-ui/react-scroll-area": "^1.0.4",
    "@radix-ui/react-select": "^2.2.4",
    "@radix-ui/react-slot": "^1.2.2",
    "@radix-ui/react-tabs": "^1.1.11",
    "@radix-ui/react-toggle-group": "^1.1.9",
    "@radix-ui/react-tooltip": "^1.0.7",
    "axios": "^1.9.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.3.1",
    "lucide-react": "^0.510.0",
    "next": "15.3.2",
    "react": "^19.0.0",
    "react-day-picker": "^8.10.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.56.3",
    "sonner": "^2.0.3",
    "tailwind-merge": "^3.3.0",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.2",
    "local-ssl-proxy": "^2.0.5",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.2.9",
    "typescript": "^5"
  }
}
</file>

</files>
